[
  {
    "objectID": "hands-on_ex/hands-on_ex_01.html",
    "href": "hands-on_ex/hands-on_ex_01.html",
    "title": "Week 1: Hands-on Exercise",
    "section": "",
    "text": "Disclaimer\n\n\n\nHands-on exercises are for my own practice and are ungraded. Thus, the plots and write-ups may be unrefined and poorly labelled.\nLet’s explore the ggplot2 package in R!"
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_01.html#load-dataset",
    "href": "hands-on_ex/hands-on_ex_01.html#load-dataset",
    "title": "Week 1: Hands-on Exercise",
    "section": "Load dataset",
    "text": "Load dataset\n\nexam_data &lt;- read_csv(\"data/data_01/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_01.html#comparing-r-graphics-with-ggplot2",
    "href": "hands-on_ex/hands-on_ex_01.html#comparing-r-graphics-with-ggplot2",
    "title": "Week 1: Hands-on Exercise",
    "section": "Comparing R graphics with ggplot2",
    "text": "Comparing R graphics with ggplot2\n\nR graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot2 has a more complicated syntax, but offers much more customization options to help you make your data visualizations beautiful."
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_01.html#exploring-ggplot2",
    "href": "hands-on_ex/hands-on_ex_01.html#exploring-ggplot2",
    "title": "Week 1: Hands-on Exercise",
    "section": "Exploring ggplot2",
    "text": "Exploring ggplot2\n\nBar chartDot plotHistogramKernel densityBox plotViolin plotScatterplot\n\n\n\nggplot(data = exam_data,\n       aes(x = RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5,\n               binwidth = 2.5) +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = MATHS,\n           fill = GENDER)) +\n  geom_histogram(bins = 20,\n                 color = \"grey20\") +\n  scale_fill_manual(values = c(\"pink\", \"steelblue\"))\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = MATHS,\n           color = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(y = MATHS,\n           x = GENDER,\n           fill = GENDER)) +\n  geom_boxplot(notch = TRUE) +\n  scale_fill_manual(values = c(\"pink\", \"steelblue\"))\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(y = MATHS,\n           x = GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() +\n  coord_cartesian(xlim = c(0, 100),\n                  ylim = c(0, 100))"
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_01.html#some-other-elements",
    "href": "hands-on_ex/hands-on_ex_01.html#some-other-elements",
    "title": "Week 1: Hands-on Exercise",
    "section": "Some other elements…",
    "text": "Some other elements…\n\nCombining geom objects + stat\n\nggplot(data = exam_data,\n       aes(y = MATHS,\n           x = GENDER,\n           fill = GENDER)) +\n  geom_boxplot(notch = TRUE) +\n  geom_point(position = \"jitter\",\n             size = 0.5) +\n  scale_fill_manual(values = c(\"pink\", \"steelblue\")) +\n  stat_summary(geom = \"point\",\n               fun = \"mean\",\n               colour = \"red\",\n               size = 4) +\n  theme_classic()\n\n\n\n\n\n\n\n\n\n\nTheme used: Classic\n\n\n\n\n\n\n\n\nScatterplot with best fit line!\n\nggplot(data = exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm,\n              linewidth = 0.5)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\nWorking with facets\n\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20) +\n  facet_wrap(~ CLASS) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\nTheme used: Minimal\n\n\n\n\n\n\nAnd that’s it for Week 1!"
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_02.html",
    "href": "hands-on_ex/hands-on_ex_02.html",
    "title": "Week 2: Hands-on Exercise",
    "section": "",
    "text": "Disclaimer\n\n\n\nHands-on exercises are for my own practice and are ungraded. Thus, the plots and write-ups may be unrefined and poorly labelled."
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_02.html#load-dataset",
    "href": "hands-on_ex/hands-on_ex_02.html#load-dataset",
    "title": "Week 2: Hands-on Exercise",
    "section": "Load dataset",
    "text": "Load dataset\n\nexam_data &lt;- read_csv(\"data/data_02/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_02.html#why-use-ggrepel",
    "href": "hands-on_ex/hands-on_ex_02.html#why-use-ggrepel",
    "title": "Week 2: Hands-on Exercise",
    "section": "Why use ggrepel?",
    "text": "Why use ggrepel?\nWhen there is a large number of data points, it may become difficult to annotate the graph using traditional ggplot2:\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\nTo use ggrepel, we just need to replace geom_text() by geom_text_repel() and geom_label() by geom_label_repel()"
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_02.html#example-of-using-ggrepel",
    "href": "hands-on_ex/hands-on_ex_02.html#example-of-using-ggrepel",
    "title": "Week 2: Hands-on Exercise",
    "section": "Example of using ggrepel",
    "text": "Example of using ggrepel\n\nPlotCode\n\n\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\nWarning: ggrepel: 317 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\nWarning: ggrepel: 317 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps"
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_02.html#themes-themes-cool-themes-from-ggtheme-package",
    "href": "hands-on_ex/hands-on_ex_02.html#themes-themes-cool-themes-from-ggtheme-package",
    "title": "Week 2: Hands-on Exercise",
    "section": "Themes! Themes! Cool themes! From ggtheme package",
    "text": "Themes! Themes! Cool themes! From ggtheme package\nWhile ggplot2 has some built-in themes such as theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void(), we can also use some cool themes from ggtheme.\n\ntheme_gray()The EconomistWSJOld Excel"
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_02.html#using-hrbthemes-package",
    "href": "hands-on_ex/hands-on_ex_02.html#using-hrbthemes-package",
    "title": "Week 2: Hands-on Exercise",
    "section": "Using hrbthemes package",
    "text": "Using hrbthemes package\nhrbthemes focuses on typographic elements, allowing you to customize label placements and fonts used.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"\")\n\n\n\n\n\n\n\n\n\n\nTips\n\n\n\n\naxis_title_size alters the font size of the axis title\nbase_size messes with the default axis labels\ngrid determines whether you see grids. It accepts the following values: TRUE, FALSE, X, x, Y, y, or a combination, i.e., XY"
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_02.html#patchwork-patching-multiple-graphs-together",
    "href": "hands-on_ex/hands-on_ex_02.html#patchwork-patching-multiple-graphs-together",
    "title": "Week 2: Hands-on Exercise",
    "section": "patchwork! Patching multiple graphs together",
    "text": "patchwork! Patching multiple graphs together\nImagine that you have multiple graphs:\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\nYou can combine two graphs together side by side:\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\np1 + p2\n\n\n\n\nOr combine three of them using the following operators:\n\n“|” operator to place the plots side by side\n“/” operator to stack one on top of another\n“()” operator the define the sequence of plotting\n\nAnd also add the following:\n\nplot_annotation(), which will automatically tag the different figures\ninset_element(), which will add another plot based on your specified position (not demonstrated)\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'A') & theme_economist()"
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_03.html",
    "href": "hands-on_ex/hands-on_ex_03.html",
    "title": "Week 3: Hands-on Exercise",
    "section": "",
    "text": "Disclaimer\n\n\n\nHands-on exercises are for my own practice and are ungraded. Thus, the plots and write-ups may be unrefined and poorly labelled."
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_03.html#load-dataset",
    "href": "hands-on_ex/hands-on_ex_03.html#load-dataset",
    "title": "Week 3: Hands-on Exercise",
    "section": "Load dataset",
    "text": "Load dataset\n\nexam_data &lt;- read_csv(\"data/data_03/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nggiraph is a ggplot2 extension that can allow plots to become interactive. Three arguments are accepted:\n\nTooltip\nOnclick\nData_id\n\nIts usage will be demonstrated via the example code chunks below."
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_03.html#tooltip-aesthetic",
    "href": "hands-on_ex/hands-on_ex_03.html#tooltip-aesthetic",
    "title": "Week 3: Hands-on Exercise",
    "section": "Tooltip aesthetic",
    "text": "Tooltip aesthetic\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\nHow to achieve interactivity?\n\n\n\nUse the interactive version of ggplot2 geom functions. Then, use girafe() to generate an svg object to be displayed on an html page.\nIn this example, hovering over data points reveal the student’s name and class for that data point.\n\n\n\n\n\n\n\n\nFurther customization\n\n\n\nggiraph objects can be customized via options = and opts_tooltip() by adding css declarations.\n\n\nYou can also display statistics on tooltips!\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)"
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_03.html#data_id-aesthetic",
    "href": "hands-on_ex/hands-on_ex_03.html#data_id-aesthetic",
    "title": "Week 3: Hands-on Exercise",
    "section": "Data_id aesthetic",
    "text": "Data_id aesthetic\n\np &lt;- ggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618\n)                                                                     \n\n\n\n\n\n\n\n\n\n\n\nInteractivity\n\n\n\nElements associated with a certain data_id will be highlighted when your cursor hovers over a data point with that data_id. In this example, this was achieved in addition to the tooltip aesthetic (that will display the data_id)."
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_03.html#onclick-aesthetic",
    "href": "hands-on_ex/hands-on_ex_03.html#onclick-aesthetic",
    "title": "Week 3: Hands-on Exercise",
    "section": "Onclick aesthetic",
    "text": "Onclick aesthetic\nonclick can be used to hyperlink to other websites on the Internet.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                               \n\n\n\n\n\n\n\n\n\n\n\nJavascript instructions\n\n\n\nNote the additional column created in the dataset exam_data called onclick that specifies the javascript to open a window with the given URL. This is necessary to make onclick work!"
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_03.html#coordinating-between-two-plots",
    "href": "hands-on_ex/hands-on_ex_03.html#coordinating-between-two-plots",
    "title": "Week 3: Hands-on Exercise",
    "section": "Coordinating between two plots",
    "text": "Coordinating between two plots\npatchwork can be used with what we have learnt today as well! The two plots will show the data points with the same data_id upon cursor hover:\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID,\n        tooltip = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID,\n        tooltip = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       )"
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_03.html#using-plotly-methods-to-achieve-interactive-data-visualization",
    "href": "hands-on_ex/hands-on_ex_03.html#using-plotly-methods-to-achieve-interactive-data-visualization",
    "title": "Week 3: Hands-on Exercise",
    "section": "Using plotly methods to achieve interactive data visualization",
    "text": "Using plotly methods to achieve interactive data visualization\nThere are two ways of doing this:\n\nplot_ly()\nggplotly()\n\n\nplot_ly()Code\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\nggplotly()Code\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH,\n                color = RACE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\nYou can achieve a coordinated linked plot using highlight_key() and subplot() to place the plots side by side.\n\nplot_ly()Code\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))"
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_03.html#using-crosstalk-methods",
    "href": "hands-on_ex/hands-on_ex_03.html#using-crosstalk-methods",
    "title": "Week 3: Hands-on Exercise",
    "section": "Using crosstalk methods",
    "text": "Using crosstalk methods\nExample of usage below:\n\nd &lt;- highlight_key(exam_data[c('ID', 'CLASS', 'GENDER', 'RACE', 'ENGLISH','MATHS', 'SCIENCE')]) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 4)"
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_03.html#basics-of-animation-using-gganimate",
    "href": "hands-on_ex/hands-on_ex_03.html#basics-of-animation-using-gganimate",
    "title": "Week 3: Hands-on Exercise",
    "section": "Basics of animation using gganimate",
    "text": "Basics of animation using gganimate\nSome terminology associated with animated plots:\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning."
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_03.html#importing-data",
    "href": "hands-on_ex/hands-on_ex_03.html#importing-data",
    "title": "Week 3: Hands-on Exercise",
    "section": "Importing data",
    "text": "Importing data\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/data_03/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\nFirst, we create a static bubble plot using our data:\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\nThen, we add transition_time() and ease_aes() to create the animations:\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_03.html#basics-of-animation-using-ggplotly",
    "href": "hands-on_ex/hands-on_ex_03.html#basics-of-animation-using-ggplotly",
    "title": "Week 3: Hands-on Exercise",
    "section": "Basics of animation using ggplotly()",
    "text": "Basics of animation using ggplotly()\nThis is done using the frame argument within the aesthetics (not executed to save render time).\nExample code:\n```{r}\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n```\n\n\n\n\n\n\n`frame =` argument\n\n\n\nNote the frame = argument within the geom_point’s aesthetics, specifying that the animation should be done across Year."
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_03.html#basics-of-animation-using-plot_ly",
    "href": "hands-on_ex/hands-on_ex_03.html#basics-of-animation-using-plot_ly",
    "title": "Week 3: Hands-on Exercise",
    "section": "Basics of animation using plot_ly()",
    "text": "Basics of animation using plot_ly()\nThis is also done using the frame argument (not executed to save render time):\n```{r}\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent, \n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          )\nbp\n```"
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_04.html",
    "href": "hands-on_ex/hands-on_ex_04.html",
    "title": "Week 4: Hands-on Exercise",
    "section": "",
    "text": "Disclaimer\n\n\n\nHands-on exercises are for my own practice and are ungraded. Thus, the plots and write-ups may be unrefined and poorly labelled."
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_template.html",
    "href": "hands-on_ex/hands-on_ex_template.html",
    "title": "Week X: Hands-on Exercise",
    "section": "",
    "text": "Disclaimer\n\n\n\nHands-on exercises are for my own practice and are ungraded. Thus, the plots and write-ups may be unrefined and poorly labelled."
  },
  {
    "objectID": "in-class_ex/in-class_ex_01.html",
    "href": "in-class_ex/in-class_ex_01.html",
    "title": "Week 1: In-class Exercise",
    "section": "",
    "text": "You may access it here."
  },
  {
    "objectID": "in-class_ex/in-class_ex_01.html#creating-my-first-tableau-dashboard",
    "href": "in-class_ex/in-class_ex_01.html#creating-my-first-tableau-dashboard",
    "title": "Week 1: In-class Exercise",
    "section": "",
    "text": "You may access it here."
  },
  {
    "objectID": "in-class_ex/in-class_ex_02.html",
    "href": "in-class_ex/in-class_ex_02.html",
    "title": "Week 2: In-class Exercise",
    "section": "",
    "text": "You may access it here."
  },
  {
    "objectID": "in-class_ex/in-class_ex_02.html#more-tableau-dashboarding",
    "href": "in-class_ex/in-class_ex_02.html#more-tableau-dashboarding",
    "title": "Week 2: In-class Exercise",
    "section": "",
    "text": "You may access it here."
  },
  {
    "objectID": "in-class_ex/in-class_ex_03.html",
    "href": "in-class_ex/in-class_ex_03.html",
    "title": "Week 3: In-class Exercise",
    "section": "",
    "text": "You may access it here."
  },
  {
    "objectID": "in-class_ex/in-class_ex_03.html#more-tableau-dashboarding",
    "href": "in-class_ex/in-class_ex_03.html#more-tableau-dashboarding",
    "title": "Week 3: In-class Exercise",
    "section": "",
    "text": "You may access it here."
  },
  {
    "objectID": "in-class_ex/in-class_ex_04.html",
    "href": "in-class_ex/in-class_ex_04.html",
    "title": "Week 4: In-class Exercise",
    "section": "",
    "text": "pacman::p_load(rstatix, gt, patchwork, tidyverse, webshot2, png)\n\n\nexam_data &lt;- read_csv(\"data/data_04/Exam_data.csv\", show_col_types = FALSE)"
  },
  {
    "objectID": "in-class_ex/in-class_ex_04.html#load-packages-and-dataset",
    "href": "in-class_ex/in-class_ex_04.html#load-packages-and-dataset",
    "title": "Week 4: In-class Exercise",
    "section": "",
    "text": "pacman::p_load(rstatix, gt, patchwork, tidyverse, webshot2, png)\n\n\nexam_data &lt;- read_csv(\"data/data_04/Exam_data.csv\", show_col_types = FALSE)"
  },
  {
    "objectID": "in-class_ex/in-class_ex_04.html#quantile-quantile-q-q-plot",
    "href": "in-class_ex/in-class_ex_04.html#quantile-quantile-q-q-plot",
    "title": "Week 4: In-class Exercise",
    "section": "Quantile-Quantile (Q-Q) Plot",
    "text": "Quantile-Quantile (Q-Q) Plot\nQ-Q plots are used to check for normality of data. The points should fit close to the straight line if the variable in question is indeed normally distributed.\nIn this case, we are checking if ‘English’ scores are normally distributed:\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(exam_data,\n       aes(sample = ENGLISH)) +\n  stat_qq() +\n  stat_qq_line()\n\n\n\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nqq &lt;- ggplot(exam_data,\n             aes(sample = ENGLISH)) +\n  stat_qq() +\n  stat_qq_line()\n\nsw_t &lt;- exam_data %&gt;% shapiro_test(ENGLISH) %&gt;% gt()\n\ntmp &lt;- tempfile(fileext = \".png\")\ngtsave(sw_t, tmp)\ntable_png &lt;- png::readPNG(tmp, native = TRUE)\n\nqq + table_png"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "About Me",
    "section": "",
    "text": "Wilson is currently working at the Housing & Development Board as a Senior Business Analyst by day. He is part of the Data Science Team under the Board’s Estate Administration & Property Group.\nBy night, he transforms into a part-time student pursuing a Master of Information Technology in Business at Singapore Management University. Beyond that, what little pockets of free time left is spent picking up tennis in an attempt to live up to his given name."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "About Me",
    "section": "Education",
    "text": "Education\nSingapore Management University\nMaster of Information Technology in Business | Aug 2021 - Present\nNational University of Singapore\nB. Soc. Sci in Economics with Honours (Highest Distinction) | Aug 2014 - Jul 2018\nPublished Honour’s Thesis\nDid the ASEAN-China Free Trade Area Actually Increase ASEAN Countries’ Exports to China?"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "About Me",
    "section": "Experience",
    "text": "Experience\nHousing & Development Board | Senior Business Analyst | Sep 2018 - present"
  },
  {
    "objectID": "take-home_ex/take-home_ex_01.html",
    "href": "take-home_ex/take-home_ex_01.html",
    "title": "Take-home Exercise 01",
    "section": "",
    "text": "This step also ensures that the variables are of the correct types (e.g. character, numeric, integer).\n\nfin_data &lt;- read_csv(\"data/FinancialJournal.csv\",\n                     col_types = cols(\"i\", \"T\", \"c\", \"d\"))\nfin_data$category &lt;-\n  fin_data$category %&gt;% factor(levels =\n                                 c(\"Education\",\n                                   \"Food\",\n                                   \"Recreation\",\n                                   \"RentAdjustment\",\n                                   \"Shelter\",\n                                   \"Wage\"))\n\nres_data &lt;- read_csv(\"data/Participants.csv\",\n                     col_types = cols(\"i\", \"i\", \"l\", \"i\", \"c\", \"c\", \"d\"))\nres_data$educationLevel &lt;-\n  res_data$educationLevel %&gt;% ordered(levels =\n                                        c(\"Low\",\n                                          \"HighSchoolOrCollege\",\n                                          \"Bachelors\",\n                                          \"Graduate\")) # order of factors may be meaningful, so use ordered()\n\nmerged_data &lt;- merge(fin_data, res_data, by = \"participantId\")"
  },
  {
    "objectID": "take-home_ex/take-home_ex_01.html#load-datasets",
    "href": "take-home_ex/take-home_ex_01.html#load-datasets",
    "title": "Take-home Exercise 01",
    "section": "",
    "text": "This step also ensures that the variables are of the correct types (e.g. character, numeric, integer).\n\nfin_data &lt;- read_csv(\"data/FinancialJournal.csv\",\n                     col_types = cols(\"i\", \"T\", \"c\", \"d\"))\nfin_data$category &lt;-\n  fin_data$category %&gt;% factor(levels =\n                                 c(\"Education\",\n                                   \"Food\",\n                                   \"Recreation\",\n                                   \"RentAdjustment\",\n                                   \"Shelter\",\n                                   \"Wage\"))\n\nres_data &lt;- read_csv(\"data/Participants.csv\",\n                     col_types = cols(\"i\", \"i\", \"l\", \"i\", \"c\", \"c\", \"d\"))\nres_data$educationLevel &lt;-\n  res_data$educationLevel %&gt;% ordered(levels =\n                                        c(\"Low\",\n                                          \"HighSchoolOrCollege\",\n                                          \"Bachelors\",\n                                          \"Graduate\")) # order of factors may be meaningful, so use ordered()\n\nmerged_data &lt;- merge(fin_data, res_data, by = \"participantId\")"
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_04.html#visualising-distributions-of-data",
    "href": "hands-on_ex/hands-on_ex_04.html#visualising-distributions-of-data",
    "title": "Week 4: Hands-on Exercise",
    "section": "Visualising distributions of data",
    "text": "Visualising distributions of data\n\nLoad packages\n\nggridges is a ggplot2 extension for plotting ridgeline plots;\nggdist is an extension for visualising distributions and uncertainty.\n\n\n\nLoad dataset\n\nexam &lt;- read_csv(\"data/data_04/Exam_Data.csv\",\n                 show_col_types = FALSE)\n\n\n\nUsing ggridges\nTwo ‘geoms’ can be used:\n\ngeom_ridgeline() uses the specified height values to draw ridgelines;\ngeom_density_ridges() estimates data densities to draw ridgelines.\n\nDemonstration using the latter:\n\ngeom_density_ridges()Code\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\nAdding colour\nColour can be added in a few ways:\n\nBased on the value along the x-axis;\nBased on cumulative density function (cdf) values.\nBased on quantiles\nBased on cut-off points\n\nDemonstration of the respective ways can be found below:\n\nBy x-axis value\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\nBy cdf value\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) + # note: this line is important\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n\n\n\n\n\nBy quantiles\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\n\n\nBy cut-off point\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n\n\n\n\n\n\n\nPlotting Raincloud plots\nAn example can be found below:\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()"
  },
  {
    "objectID": "take-home_ex/take-home_ex_01.html#getting-to-know-our-data",
    "href": "take-home_ex/take-home_ex_01.html#getting-to-know-our-data",
    "title": "Take-home Exercise 01",
    "section": "Getting to know our data",
    "text": "Getting to know our data\nThe City of Engagement has a population of 50,000. We have respondents’ data with a sample size of 1,000, which should give us a decent representation of how the population looks like.\nFirstly, let’s perform some basic visualisations so that we can get to know our data better.\n\nHousehold SizeKids?AgeEducation LevelInterest Group\n\n\n\n\nCode\n# Creating a data.frame containing the frequencies of householdSize in our dataset of 1,000 participants\nhs_counts &lt;- data.frame(table(res_data$householdSize))\ncolnames(hs_counts) &lt;- c(\"householdSize\", \"Freq\")\n\n# Adding a percentage variable based on the frequencies\nhs_counts$pct &lt;- percent(hs_counts$Freq / sum(hs_counts$Freq))\n\n# Choosing some nice colors for the plot\nnice_colors &lt;- c(\"#80b1d3\", \"#8dd3c7\", \"#bebada\")\n\n# Plotting (using coord_polar creates a pie chart from a stacked bar chart)\nggplot(hs_counts, aes(x = \"\", y = Freq, fill = factor(householdSize))) + \n  geom_bar(stat = \"identity\", width = 1, color = \"white\") +\n  geom_text(aes(label = pct), position = position_stack(vjust = 0.5)) +\n  coord_polar(\"y\", start = 0) +\n  labs(title = \"Household Size Distribution\",\n       subtitle = \"The most common household size is 2, but the distribution is rather equal\",\n       fill = \"Household Size\") +\n  theme_void() +\n  scale_fill_manual(values = nice_colors, guide = guide_legend(reverse = TRUE)) +\n  theme(plot.title = element_text(face = \"bold\", size = 16),\n        plot.subtitle = element_text(size = 12))\n\n\n\n\n\n\n\n\n\nCode\n# Creating a data.frame containing the frequencies of haveKids in our dataset of 1,000 participants\nkids_counts &lt;- data.frame(table(res_data$haveKids))\ncolnames(kids_counts) &lt;- c(\"haveKids\", \"Freq\")\n\n# Adding a percentage variable based on the frequencies\nkids_counts$pct &lt;- percent(kids_counts$Freq / sum(kids_counts$Freq))\n\n# Choosing some nice colors for the plot\nnice_colors &lt;- c(\"#80b1d3\", \"#8dd3c7\")\n\n# Plotting (using coord_polar creates a pie chart from a stacked bar chart)\nggplot(kids_counts, aes(x = \"\", y = Freq, fill = factor(haveKids))) + \n  geom_bar(stat = \"identity\", width = 1, color = \"white\") +\n  geom_text(aes(label = pct), position = position_stack(vjust = 0.5)) +\n  coord_polar(\"y\", start = 0) +\n  labs(title = \"Distribution of Whether Respondents Have Kids\",\n       subtitle = \"Most respondents do not have kids. Only slightly less than a third have kids.\",\n       fill = \"Do respondents have kids?\") +\n  theme_void() +\n  scale_fill_manual(values = nice_colors, guide = guide_legend(reverse = TRUE)) +\n  theme(plot.title = element_text(face = \"bold\", size = 16),\n        plot.subtitle = element_text(size = 12))\n\n\n\n\n\n\n\n\n\nCode\n# Calculate the mean, min, and max age\nmean_age &lt;- mean(res_data$age)\nmin_age &lt;- min(res_data$age)\nmax_age &lt;- max(res_data$age)\n\n# Choosing some nice colors for the plot\nnice_colors &lt;- c(\"#80b1d3\", \"#8dd3c7\", \"#bebada\", \"#fccde5\")\n\n# Plotting\nggplot(res_data, aes(x = age)) + \n  geom_histogram(breaks = c(18, 29, 39, 49, 60), fill = nice_colors, color = \"white\") +\n  labs(title = \"Age Distribution\",\n       subtitle = paste(\"The age groups are relatively evenly distributed, with \", \"Min. Age = \", min_age, \" and Max. Age = \", max_age, sep = \"\"),\n       x = \"Age\",\n       y = \"Counts\",\n       caption = \"Note:\\nFor geom_histogram(), all bins are left-inclusive and right-exclusive by default, except the rightmost bin,\\nwhich is both left and right-inclusive.\") +\n  theme_bw() +\n  theme(plot.title = element_text(face = \"bold\", size = 16),\n        plot.subtitle = element_text(size = 12),\n        plot.caption = element_text(size = 10, hjust = 0)) +\n  geom_vline(xintercept = mean_age, color = \"#333333\", linetype = \"dashed\") +\n  annotate(\"text\", x = mean_age + 4.2, y = 40, label = paste(\"Mean age:\", round(mean_age, 1)), color = \"#333333\") +\n  geom_text(aes(x = 23.5, y = 150, label = \"18-29\\nyears old\"), size = 3.5) +\n  geom_text(aes(x = 34.5, y = 150, label = \"30-39\\nyears old\"), size = 3.5) +\n  geom_text(aes(x = 44.5, y = 150, label = \"40-49\\nyears old\"), size = 3.5) +\n  geom_text(aes(x = 54.5, y = 150, label = \"50-60\\nyears old\"), size = 3.5) +\n  scale_y_continuous(breaks = breaks_width(50)) # this useful function is from the 'scales' package\n\n\n\n\n\n\n\n\n\nCode\n# Creating a data.frame containing the frequencies of educationLevel in our dataset of 1,000 participants\nedu_counts &lt;- data.frame(table(res_data$educationLevel))\ncolnames(edu_counts) &lt;- c(\"educationLevel\", \"Counts\")\n\n# Adding a percentage variable based on the frequencies\nedu_counts$pct &lt;- percent(edu_counts$Counts / sum(edu_counts$Counts))\n\n# Choosing some nice colors for the plot\nnice_colors &lt;- c(\"#80b1d3\", \"#8dd3c7\", \"#bebada\", \"#fccde5\")\n\n# Plot\nggplot(edu_counts, aes(x = educationLevel, y = Counts)) +\n  geom_bar(stat = \"identity\", fill = nice_colors, color = \"#333333\") +\n  labs(title = \"Education Level Distribution\", x = \"Education Level\", y = \"Counts\",\n       subtitle = \"More than half of respondents have highest education level of 'High School/College'\") +\n  theme_bw() +\n  theme(plot.title = element_text(face = \"bold\", size = 16),\n        plot.subtitle = element_text(size = 12)) +\n  geom_text(aes(label = pct), vjust = 1.5)\n\n\n\n\n\n\n\n\n\nCode\n# Creating a data.frame containing the frequencies of interestGroup in our dataset of 1,000 participants\ninterest_counts &lt;- data.frame(table(res_data$interestGroup))\ncolnames(interest_counts) &lt;- c(\"interestGroup\", \"Counts\")\n\n# Adding a percentage variable based on the frequencies\ninterest_counts$pct &lt;- percent(interest_counts$Counts / sum(interest_counts$Counts), accuracy = 0.1)\n\n# Plot\nggplot(interest_counts, aes(x = reorder(interestGroup, -Counts), y = Counts)) +\n  geom_bar(stat = \"identity\", fill = \"#80b1d3\", color = \"#333333\") +\n  labs(title = \"Interest Group Distribution\", x = \"Interest Group\", y = \"Counts\",\n       subtitle = \"Most common interest among respondents is 'J', and least common interest is 'E'\") +\n  theme_bw() +\n  theme(plot.title = element_text(face = \"bold\", size = 16),\n        plot.subtitle = element_text(size = 12)) +\n  geom_text(aes(label = pct), vjust = 1.5)"
  }
]