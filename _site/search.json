[
  {
    "objectID": "hands-on_ex/hands-on_ex_01.html",
    "href": "hands-on_ex/hands-on_ex_01.html",
    "title": "Week 1: Hands-on Exercise",
    "section": "",
    "text": "Disclaimer\n\n\n\nHands-on exercises are for my own practice and are ungraded. Thus, the plots and write-ups may be unrefined and poorly labelled.\nLet’s explore the ggplot2 package in R!"
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_01.html#load-dataset",
    "href": "hands-on_ex/hands-on_ex_01.html#load-dataset",
    "title": "Week 1: Hands-on Exercise",
    "section": "Load dataset",
    "text": "Load dataset\n\nexam_data &lt;- read_csv(\"data/data_01/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_01.html#comparing-r-graphics-with-ggplot2",
    "href": "hands-on_ex/hands-on_ex_01.html#comparing-r-graphics-with-ggplot2",
    "title": "Week 1: Hands-on Exercise",
    "section": "Comparing R graphics with ggplot2",
    "text": "Comparing R graphics with ggplot2\n\nR graphicsggplot2\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot2 has a more complicated syntax, but offers much more customization options to help you make your data visualizations beautiful."
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_01.html#exploring-ggplot2",
    "href": "hands-on_ex/hands-on_ex_01.html#exploring-ggplot2",
    "title": "Week 1: Hands-on Exercise",
    "section": "Exploring ggplot2",
    "text": "Exploring ggplot2\n\nBar chartDot plotHistogramKernel densityBox plotViolin plotScatterplot\n\n\n\nggplot(data = exam_data,\n       aes(x = RACE)) +\n  geom_bar()\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5,\n               binwidth = 2.5) +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = MATHS,\n           fill = GENDER)) +\n  geom_histogram(bins = 20,\n                 color = \"grey20\") +\n  scale_fill_manual(values = c(\"pink\", \"steelblue\"))\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = MATHS,\n           color = GENDER)) +\n  geom_density()\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(y = MATHS,\n           x = GENDER,\n           fill = GENDER)) +\n  geom_boxplot(notch = TRUE) +\n  scale_fill_manual(values = c(\"pink\", \"steelblue\"))\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(y = MATHS,\n           x = GENDER)) +\n  geom_violin()\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() +\n  coord_cartesian(xlim = c(0, 100),\n                  ylim = c(0, 100))"
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_01.html#some-other-elements",
    "href": "hands-on_ex/hands-on_ex_01.html#some-other-elements",
    "title": "Week 1: Hands-on Exercise",
    "section": "Some other elements…",
    "text": "Some other elements…\n\nCombining geom objects + stat\n\nggplot(data = exam_data,\n       aes(y = MATHS,\n           x = GENDER,\n           fill = GENDER)) +\n  geom_boxplot(notch = TRUE) +\n  geom_point(position = \"jitter\",\n             size = 0.5) +\n  scale_fill_manual(values = c(\"pink\", \"steelblue\")) +\n  stat_summary(geom = \"point\",\n               fun = \"mean\",\n               colour = \"red\",\n               size = 4) +\n  theme_classic()\n\n\n\n\n\n\n\n\n\n\nTheme used: Classic\n\n\n\n\n\n\n\n\nScatterplot with best fit line!\n\nggplot(data = exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm,\n              linewidth = 0.5)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\nWorking with facets\n\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20) +\n  facet_wrap(~ CLASS) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\nTheme used: Minimal\n\n\n\n\n\n\nAnd that’s it for Week 1!"
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_02.html",
    "href": "hands-on_ex/hands-on_ex_02.html",
    "title": "Week 2: Hands-on Exercise",
    "section": "",
    "text": "Disclaimer\n\n\n\nHands-on exercises are for my own practice and are ungraded. Thus, the plots and write-ups may be unrefined and poorly labelled."
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_02.html#load-dataset",
    "href": "hands-on_ex/hands-on_ex_02.html#load-dataset",
    "title": "Week 2: Hands-on Exercise",
    "section": "Load dataset",
    "text": "Load dataset\n\nexam_data &lt;- read_csv(\"data/data_02/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_02.html#why-use-ggrepel",
    "href": "hands-on_ex/hands-on_ex_02.html#why-use-ggrepel",
    "title": "Week 2: Hands-on Exercise",
    "section": "Why use ggrepel?",
    "text": "Why use ggrepel?\nWhen there is a large number of data points, it may become difficult to annotate the graph using traditional ggplot2:\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\n\n\n\nTo use ggrepel, we just need to replace geom_text() by geom_text_repel() and geom_label() by geom_label_repel()"
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_02.html#example-of-using-ggrepel",
    "href": "hands-on_ex/hands-on_ex_02.html#example-of-using-ggrepel",
    "title": "Week 2: Hands-on Exercise",
    "section": "Example of using ggrepel",
    "text": "Example of using ggrepel\n\nPlotCode\n\n\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\nWarning: ggrepel: 317 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\nWarning: ggrepel: 317 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps"
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_02.html#themes-themes-cool-themes-from-ggtheme-package",
    "href": "hands-on_ex/hands-on_ex_02.html#themes-themes-cool-themes-from-ggtheme-package",
    "title": "Week 2: Hands-on Exercise",
    "section": "Themes! Themes! Cool themes! From ggtheme package",
    "text": "Themes! Themes! Cool themes! From ggtheme package\nWhile ggplot2 has some built-in themes such as theme_gray(), theme_bw(), theme_classic(), theme_dark(), theme_light(), theme_linedraw(), theme_minimal(), and theme_void(), we can also use some cool themes from ggtheme.\n\ntheme_gray()The EconomistWSJOld Excel"
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_02.html#using-hrbthemes-package",
    "href": "hands-on_ex/hands-on_ex_02.html#using-hrbthemes-package",
    "title": "Week 2: Hands-on Exercise",
    "section": "Using hrbthemes package",
    "text": "Using hrbthemes package\nhrbthemes focuses on typographic elements, allowing you to customize label placements and fonts used.\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"\")\n\n\n\n\n\n\n\n\n\n\nTips\n\n\n\n\naxis_title_size alters the font size of the axis title\nbase_size messes with the default axis labels\ngrid determines whether you see grids. It accepts the following values: TRUE, FALSE, X, x, Y, y, or a combination, i.e., XY"
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_02.html#patchwork-patching-multiple-graphs-together",
    "href": "hands-on_ex/hands-on_ex_02.html#patchwork-patching-multiple-graphs-together",
    "title": "Week 2: Hands-on Exercise",
    "section": "patchwork! Patching multiple graphs together",
    "text": "patchwork! Patching multiple graphs together\nImagine that you have multiple graphs:\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")\n\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")\n\nYou can combine two graphs together side by side:\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\np1 + p2\n\n\n\n\nOr combine three of them using the following operators:\n\n“|” operator to place the plots side by side\n“/” operator to stack one on top of another\n“()” operator the define the sequence of plotting\n\nAnd also add the following:\n\nplot_annotation(), which will automatically tag the different figures\ninset_element(), which will add another plot based on your specified position (not demonstrated)\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'A') & theme_economist()"
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_03.html",
    "href": "hands-on_ex/hands-on_ex_03.html",
    "title": "Week 3: Hands-on Exercise",
    "section": "",
    "text": "Disclaimer\n\n\n\nHands-on exercises are for my own practice and are ungraded. Thus, the plots and write-ups may be unrefined and poorly labelled."
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_03.html#load-dataset",
    "href": "hands-on_ex/hands-on_ex_03.html#load-dataset",
    "title": "Week 3: Hands-on Exercise",
    "section": "Load dataset",
    "text": "Load dataset\n\nexam_data &lt;- read_csv(\"data/data_03/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nggiraph is a ggplot2 extension that can allow plots to become interactive. Three arguments are accepted:\n\nTooltip\nOnclick\nData_id\n\nIts usage will be demonstrated via the example code chunks below."
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_03.html#tooltip-aesthetic",
    "href": "hands-on_ex/hands-on_ex_03.html#tooltip-aesthetic",
    "title": "Week 3: Hands-on Exercise",
    "section": "Tooltip aesthetic",
    "text": "Tooltip aesthetic\n\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\n\n\n\n\n\n\nHow to achieve interactivity?\n\n\n\nUse the interactive version of ggplot2 geom functions. Then, use girafe() to generate an svg object to be displayed on an html page.\nIn this example, hovering over data points reveal the student’s name and class for that data point.\n\n\n\n\n\n\n\n\nFurther customization\n\n\n\nggiraph objects can be customized via options = and opts_tooltip() by adding css declarations.\n\n\nYou can also display statistics on tooltips!\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"Mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)"
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_03.html#data_id-aesthetic",
    "href": "hands-on_ex/hands-on_ex_03.html#data_id-aesthetic",
    "title": "Week 3: Hands-on Exercise",
    "section": "Data_id aesthetic",
    "text": "Data_id aesthetic\n\np &lt;- ggplot(data=exam_data,\n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618\n)                                                                     \n\n\n\n\n\n\n\n\n\n\n\nInteractivity\n\n\n\nElements associated with a certain data_id will be highlighted when your cursor hovers over a data point with that data_id. In this example, this was achieved in addition to the tooltip aesthetic (that will display the data_id)."
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_03.html#onclick-aesthetic",
    "href": "hands-on_ex/hands-on_ex_03.html#onclick-aesthetic",
    "title": "Week 3: Hands-on Exercise",
    "section": "Onclick aesthetic",
    "text": "Onclick aesthetic\nonclick can be used to hyperlink to other websites on the Internet.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                               \n\n\n\n\n\n\n\n\n\n\n\nJavascript instructions\n\n\n\nNote the additional column created in the dataset exam_data called onclick that specifies the javascript to open a window with the given URL. This is necessary to make onclick work!"
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_03.html#coordinating-between-two-plots",
    "href": "hands-on_ex/hands-on_ex_03.html#coordinating-between-two-plots",
    "title": "Week 3: Hands-on Exercise",
    "section": "Coordinating between two plots",
    "text": "Coordinating between two plots\npatchwork can be used with what we have learnt today as well! The two plots will show the data points with the same data_id upon cursor hover:\n\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID,\n        tooltip = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(data_id = ID,\n        tooltip = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), \n       width_svg = 6,\n       height_svg = 3,\n       options = list(\n         opts_hover(css = \"fill: #202020;\"),\n         opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       )"
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_03.html#using-plotly-methods-to-achieve-interactive-data-visualization",
    "href": "hands-on_ex/hands-on_ex_03.html#using-plotly-methods-to-achieve-interactive-data-visualization",
    "title": "Week 3: Hands-on Exercise",
    "section": "Using plotly methods to achieve interactive data visualization",
    "text": "Using plotly methods to achieve interactive data visualization\nThere are two ways of doing this:\n\nplot_ly()\nggplotly()\n\n\nplot_ly()Code\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\nggplotly()Code\n\n\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH,\n                color = RACE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)\n\n\n\n\nYou can achieve a coordinated linked plot using highlight_key() and subplot() to place the plots side by side.\n\nplot_ly()Code\n\n\n\n\n\n\n\n\n\n\n\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))"
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_03.html#using-crosstalk-methods",
    "href": "hands-on_ex/hands-on_ex_03.html#using-crosstalk-methods",
    "title": "Week 3: Hands-on Exercise",
    "section": "Using crosstalk methods",
    "text": "Using crosstalk methods\nExample of usage below:\n\nd &lt;- highlight_key(exam_data[c('ID', 'CLASS', 'GENDER', 'RACE', 'ENGLISH','MATHS', 'SCIENCE')]) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 4)"
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_03.html#basics-of-animation-using-gganimate",
    "href": "hands-on_ex/hands-on_ex_03.html#basics-of-animation-using-gganimate",
    "title": "Week 3: Hands-on Exercise",
    "section": "Basics of animation using gganimate",
    "text": "Basics of animation using gganimate\nSome terminology associated with animated plots:\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning."
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_03.html#importing-data",
    "href": "hands-on_ex/hands-on_ex_03.html#importing-data",
    "title": "Week 3: Hands-on Exercise",
    "section": "Importing data",
    "text": "Importing data\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/data_03/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\nFirst, we create a static bubble plot using our data:\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\nThen, we add transition_time() and ease_aes() to create the animations:\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_03.html#basics-of-animation-using-ggplotly",
    "href": "hands-on_ex/hands-on_ex_03.html#basics-of-animation-using-ggplotly",
    "title": "Week 3: Hands-on Exercise",
    "section": "Basics of animation using ggplotly()",
    "text": "Basics of animation using ggplotly()\nThis is done using the frame argument within the aesthetics (not executed to save render time).\nExample code:\n```{r}\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n```\n\n\n\n\n\n\n`frame =` argument\n\n\n\nNote the frame = argument within the geom_point’s aesthetics, specifying that the animation should be done across Year."
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_03.html#basics-of-animation-using-plot_ly",
    "href": "hands-on_ex/hands-on_ex_03.html#basics-of-animation-using-plot_ly",
    "title": "Week 3: Hands-on Exercise",
    "section": "Basics of animation using plot_ly()",
    "text": "Basics of animation using plot_ly()\nThis is also done using the frame argument (not executed to save render time):\n```{r}\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent, \n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          )\nbp\n```"
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_04.html",
    "href": "hands-on_ex/hands-on_ex_04.html",
    "title": "Week 4: Hands-on Exercise",
    "section": "",
    "text": "Disclaimer\n\n\n\nHands-on exercises are for my own practice and are ungraded. Thus, the plots and write-ups may be unrefined and poorly labelled."
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_04.html#visualising-distributions-of-data",
    "href": "hands-on_ex/hands-on_ex_04.html#visualising-distributions-of-data",
    "title": "Week 4: Hands-on Exercise",
    "section": "Visualising distributions of data",
    "text": "Visualising distributions of data\n\nLoad packages\n\nggridges is a ggplot2 extension for plotting ridgeline plots;\nggdist is an extension for visualising distributions and uncertainty.\n\n\n\nLoad dataset\n\nexam &lt;- read_csv(\"data/data_04/Exam_Data.csv\",\n                 show_col_types = FALSE)\n\n\n\nUsing ggridges\nTwo ‘geoms’ can be used:\n\ngeom_ridgeline() uses the specified height values to draw ridgelines;\ngeom_density_ridges() estimates data densities to draw ridgelines.\n\nDemonstration using the latter:\n\ngeom_density_ridges()Code\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\nAdding colour\nColour can be added in a few ways:\n\nBased on the value along the x-axis;\nBased on cumulative density function (cdf) values.\nBased on quantiles\nBased on cut-off points\n\nDemonstration of the respective ways can be found below:\n\nBy x-axis value\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n\n\n\n\n\n\nBy cdf value\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) + # note: this line is important\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n\n\n\n\n\nBy quantiles\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\n\n\nBy cut-off point\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n\n\n\n\n\n\n\nPlotting Raincloud plots\nAn example can be found below:\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()"
  },
  {
    "objectID": "hands-on_ex/hands-on_ex_template.html",
    "href": "hands-on_ex/hands-on_ex_template.html",
    "title": "Week X: Hands-on Exercise",
    "section": "",
    "text": "Disclaimer\n\n\n\nHands-on exercises are for my own practice and are ungraded. Thus, the plots and write-ups may be unrefined and poorly labelled."
  },
  {
    "objectID": "in-class_ex/in-class_ex_01.html",
    "href": "in-class_ex/in-class_ex_01.html",
    "title": "Week 1: In-class Exercise",
    "section": "",
    "text": "You may access it here."
  },
  {
    "objectID": "in-class_ex/in-class_ex_01.html#creating-my-first-tableau-dashboard",
    "href": "in-class_ex/in-class_ex_01.html#creating-my-first-tableau-dashboard",
    "title": "Week 1: In-class Exercise",
    "section": "",
    "text": "You may access it here."
  },
  {
    "objectID": "in-class_ex/in-class_ex_02.html",
    "href": "in-class_ex/in-class_ex_02.html",
    "title": "Week 2: In-class Exercise",
    "section": "",
    "text": "You may access it here."
  },
  {
    "objectID": "in-class_ex/in-class_ex_02.html#more-tableau-dashboarding",
    "href": "in-class_ex/in-class_ex_02.html#more-tableau-dashboarding",
    "title": "Week 2: In-class Exercise",
    "section": "",
    "text": "You may access it here."
  },
  {
    "objectID": "in-class_ex/in-class_ex_03.html",
    "href": "in-class_ex/in-class_ex_03.html",
    "title": "Week 3: In-class Exercise",
    "section": "",
    "text": "You may access it here."
  },
  {
    "objectID": "in-class_ex/in-class_ex_03.html#more-tableau-dashboarding",
    "href": "in-class_ex/in-class_ex_03.html#more-tableau-dashboarding",
    "title": "Week 3: In-class Exercise",
    "section": "",
    "text": "You may access it here."
  },
  {
    "objectID": "in-class_ex/in-class_ex_04.html",
    "href": "in-class_ex/in-class_ex_04.html",
    "title": "Week 4: In-class Exercise",
    "section": "",
    "text": "pacman::p_load(rstatix, gt, patchwork, tidyverse, webshot2, png)\n\n\nexam_data &lt;- read_csv(\"data/data_04/Exam_data.csv\", show_col_types = FALSE)"
  },
  {
    "objectID": "in-class_ex/in-class_ex_04.html#load-packages-and-dataset",
    "href": "in-class_ex/in-class_ex_04.html#load-packages-and-dataset",
    "title": "Week 4: In-class Exercise",
    "section": "",
    "text": "pacman::p_load(rstatix, gt, patchwork, tidyverse, webshot2, png)\n\n\nexam_data &lt;- read_csv(\"data/data_04/Exam_data.csv\", show_col_types = FALSE)"
  },
  {
    "objectID": "in-class_ex/in-class_ex_04.html#quantile-quantile-q-q-plot",
    "href": "in-class_ex/in-class_ex_04.html#quantile-quantile-q-q-plot",
    "title": "Week 4: In-class Exercise",
    "section": "Quantile-Quantile (Q-Q) Plot",
    "text": "Quantile-Quantile (Q-Q) Plot\nQ-Q plots are used to check for normality of data. The points should fit close to the straight line if the variable in question is indeed normally distributed.\nIn this case, we are checking if ‘English’ scores are normally distributed:\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nggplot(exam_data,\n       aes(sample = ENGLISH)) +\n  stat_qq() +\n  stat_qq_line()\n\n\n\n\n\nPlotCode\n\n\n\n\n\n\n\n\n\n\nqq &lt;- ggplot(exam_data,\n             aes(sample = ENGLISH)) +\n  stat_qq() +\n  stat_qq_line()\n\nsw_t &lt;- exam_data %&gt;% shapiro_test(ENGLISH) %&gt;% gt()\n\ntmp &lt;- tempfile(fileext = \".png\")\ngtsave(sw_t, tmp)\ntable_png &lt;- png::readPNG(tmp, native = TRUE)\n\nqq + table_png"
  },
  {
    "objectID": "in-class_ex/in-class_ex_05.html",
    "href": "in-class_ex/in-class_ex_05.html",
    "title": "Week 5: In-class Exercise",
    "section": "",
    "text": "pacman::p_load(jsonlite, tidygraph, ggraph, visNetwork, tidyverse)\n\n\nMC1 &lt;- fromJSON(\"data/data_05/MC1.json\")\nMC1_nodes &lt;- as_tibble(MC1$nodes) %&gt;%\n  select(id, type, country)\nMc1_edges &lt;- as_tibble(MC1$links) %&gt;%\n  select(source, target, type, weight, key)"
  },
  {
    "objectID": "in-class_ex/in-class_ex_06.html",
    "href": "in-class_ex/in-class_ex_06.html",
    "title": "Week 6: In-class Exercise",
    "section": "",
    "text": "There are a few: PCP, Heatmap, and Treemap."
  },
  {
    "objectID": "in-class_ex/in-class_ex_06.html#more-tableau-dashboarding",
    "href": "in-class_ex/in-class_ex_06.html#more-tableau-dashboarding",
    "title": "Week 6: In-class Exercise",
    "section": "",
    "text": "There are a few: PCP, Heatmap, and Treemap."
  },
  {
    "objectID": "in-class_ex/in-class_ex_07.html",
    "href": "in-class_ex/in-class_ex_07.html",
    "title": "Week 7: In-class Exercise",
    "section": "",
    "text": "Line graph. Slopegraph Heatmap"
  },
  {
    "objectID": "in-class_ex/in-class_ex_07.html#more-tableau-dashboarding---time-series-data",
    "href": "in-class_ex/in-class_ex_07.html#more-tableau-dashboarding---time-series-data",
    "title": "Week 7: In-class Exercise",
    "section": "",
    "text": "Line graph. Slopegraph Heatmap"
  },
  {
    "objectID": "in-class_ex/in-class_ex_07.html#section",
    "href": "in-class_ex/in-class_ex_07.html#section",
    "title": "Week 7: In-class Exercise",
    "section": "",
    "text": "pacman::p_load(ggHoriPlot, ggthemes, tidyverse)\n\n\naverp &lt;- read_csv(\"data/data_07/AVERP.csv\") %&gt;%\n  mutate(`Date` = day(`Date`))\n\nRows: 7452 Columns: 3\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): Date, Consumer Items\ndbl (1): Values\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\naverp %&gt;% \n  filter(Date &gt;= \"2018-01-01\") %&gt;%\n  ggplot() +\n  geom_horizon(aes(x = Date, y=Values), \n               origin = \"midpoint\", \n               horizonscale = 6) +\n  facet_grid(averp$`Consumer Items` ~ .) +\n    theme_few() +\n  scale_fill_hcl(palette = 'RdBu') +\n  theme(panel.spacing.y=unit(0, \"lines\"), strip.text.y = element_text(\n    size = 5, angle = 0, hjust = 0),\n    legend.position = 'none',\n    axis.text.y = element_blank(),\n    axis.text.x = element_text(size=7),\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.ticks.y = element_blank(),\n    panel.border = element_blank()\n    ) +\n    scale_x_date(expand=c(0,0), date_breaks = \"3 month\", date_labels = \"%b%y\") +\n  ggtitle('Average Retail Prices of Selected Consumer Items (Jan 2018 to Dec 2022)')"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "About Me",
    "section": "",
    "text": "Wilson is currently working at the Housing & Development Board as a Senior Business Analyst by day. He is part of the Data Science Team under the Board’s Estate Administration & Property Group.\nBy night, he transforms into a part-time student pursuing a Master of Information Technology in Business at Singapore Management University. Beyond that, what little pockets of free time left is spent picking up tennis in an attempt to live up to his given name."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "About Me",
    "section": "Education",
    "text": "Education\nSingapore Management University\nMaster of Information Technology in Business | Aug 2021 - Present\nNational University of Singapore\nB. Soc. Sci in Economics with Honours (Highest Distinction) | Aug 2014 - Jul 2018\nPublished Honour’s Thesis\nDid the ASEAN-China Free Trade Area Actually Increase ASEAN Countries’ Exports to China?"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "About Me",
    "section": "Experience",
    "text": "Experience\nHousing & Development Board | Senior Business Analyst | Sep 2018 - present"
  },
  {
    "objectID": "take-home_ex/take-home_ex_01.html",
    "href": "take-home_ex/take-home_ex_01.html",
    "title": "Take-home Exercise 01",
    "section": "",
    "text": "The City of Engagement, with a total population of 50,000, is a small city located in the Country of Nowhere. The city serves as a service centre of an agriculture region surrounding the city. The main agriculture of the region is fruit farms and vineyards. The local council of the city is in the process of preparing the Local Plan 2023. A sample survey of 1000 representative residents had been conducted to collect data related to their household demographic and spending patterns, among other things. The city aims to use the data to assist with their major community revitalization efforts, including how to allocate a very large city renewal grant they have recently received."
  },
  {
    "objectID": "take-home_ex/take-home_ex_01.html#background",
    "href": "take-home_ex/take-home_ex_01.html#background",
    "title": "Take-home Exercise 01",
    "section": "",
    "text": "The City of Engagement, with a total population of 50,000, is a small city located in the Country of Nowhere. The city serves as a service centre of an agriculture region surrounding the city. The main agriculture of the region is fruit farms and vineyards. The local council of the city is in the process of preparing the Local Plan 2023. A sample survey of 1000 representative residents had been conducted to collect data related to their household demographic and spending patterns, among other things. The city aims to use the data to assist with their major community revitalization efforts, including how to allocate a very large city renewal grant they have recently received."
  },
  {
    "objectID": "take-home_ex/take-home_ex_01.html#data-preparation",
    "href": "take-home_ex/take-home_ex_01.html#data-preparation",
    "title": "Take-home Exercise 01",
    "section": "Data Preparation",
    "text": "Data Preparation\nThere are two datasets for this exercise:\n\nThe first one contains various demographic information of survey participants (Participants.csv)\nThe second contains various financial transactions of survey participants (FinancialJournal.csv)\n\n\n\n\n\n\n\nData description (click to view)\n\n\n\n\n\nParticipants.csv\nContains information about the residents of City of Engagement that have agreed to participate in this study.\n\nparticipantId (integer): unique ID assigned to each participant.\nhouseholdSize (integer): the number of people in the participant’s household\nhaveKids (boolean): whether there are children living in the participant’s household.\nage (integer): participant’s age in years at the start of the study.\neducationLevel (string factor): the participant’s education level, one of: {“Low”, “HighSchoolOrCollege”, “Bachelors”, “Graduate”}\ninterestGroup (char): a char representing the participant’s stated primary interest group, one of {“A”, “B”, “C”, “D”, “E”, “F”, “G”, “H”, “I”, “J”}. Note: specific topics of interest have been redacted to avoid bias.\njoviality (float): a value ranging from [0,1] indicating the participant’s overall happiness level at the start of the study.\n\nFinancialJournal.csv\nContains information about financial transactions.\n\nparticipantId (integer): unique ID corresponding to the participant affected\ntimestamp (datetime): the time when the check-in was logged\ncategory (string factor): a string describing the expense category, one of {“Education”, “Food”, “Recreation”, “RentAdjustment”, “Shelter”, “Wage”}\namount (double): the amount of the transaction\n\n\n\n\nWhile importing the datasets, we will also ensure that the variables are of the correct type (e.g. character, numeric, integer):\n\nLoad datasets\n\np &lt;- read_csv(\"data/Participants.csv\",\n                     col_types = cols(\"i\", \"i\", \"l\", \"i\", \"c\", \"c\", \"d\"))\nif (any(is.na(p)) == FALSE) {\n  cat(\"Output:\", \"There are no missing values in Participants.csv\", \"\\n\")\n} else {\n  cat(\"Output:\", \"There are missing values in Participants.csv\", \"\\n\")\n}\np$educationLevel &lt;-\n  p$educationLevel %&gt;% ordered(levels =\n                                 c(\"Low\",\n                                   \"HighSchoolOrCollege\",\n                                   \"Bachelors\",\n                                   \"Graduate\")) # order of factors may be meaningful, so use ordered()\np_data &lt;- distinct(p) # remove any possible duplicate rows\n\nfin &lt;- read_csv(\"data/FinancialJournal.csv\",\n                     col_types = cols(\"i\", \"T\", \"c\", \"d\"))\nif (any(is.na(fin)) == FALSE) {\n  cat(\"Output:\", \"There are no missing values in FinancialJournal.csv\", \"\\n\")\n} else {\n  cat(\"Output:\", \"There are missing values in FinancialJournal.csv\", \"\\n\")\n}\nfin$category &lt;-\n  fin$category %&gt;% factor(levels =\n                            c(\"Education\",\n                              \"Food\",\n                              \"Recreation\",\n                              \"RentAdjustment\",\n                              \"Shelter\",\n                              \"Wage\"))\nfin_data &lt;- distinct(fin) # remove any possible duplicate rows\n\nOutput: There are no missing values in Participants.csv \nOutput: There are no missing values in FinancialJournal.csv \n\n\nThere were 0 (out of 1011) duplicate rows for Participants.csv and 1113 (out of 1513636) duplicate rows for FinancialJournal.csv. They have been removed.\n\n\n\n\n\n\nInformation about col_types\n\n\n\n“i” is for integer, “c” is for character, “l” is for logical, “d” is for double, “T” is for datetime.\n\n\nBefore we move on, let’s check if the financial journal is complete for all participants:\n\ncounts &lt;- fin_data %&gt;% group_by(participantId) %&gt;% summarise(n_obs = n())\n\nggplot(counts, aes(x = \"\", y = n_obs)) +\n  geom_boxplot(fill = \"#80b1d3\", outlier.shape = NA, width = 0.5) +\n  geom_jitter(width = 0.2, height = 0, alpha = 0.5, color = \"#FFA07A\") +\n  scale_y_continuous(expand = c(0.05, 0)) +\n  labs(title = \"Distribution of Financial Transactions per participantId\",\n       subtitle = \"Some participants have rather low numbers of financial transactions\\n(located at the bottom)\",\n       y = \"No. of financial transactions\",\n       x = \"\") +\n  theme_classic() +\n  theme(axis.line.x = element_blank(),\n        axis.text.x = element_blank(),\n        axis.ticks.x = element_blank(),\n        plot.title = element_text(face = \"bold\", size = 16),\n        plot.subtitle = element_text(size = 12))\n\n\n\n\nFor the group of participants that have rather low numbers of financial transactions, it could be due to exogenous reasons (e.g., data entry error, left the city, gave up on the study halfway). As such, they will be removed for the purposes of this analysis:\n\nnew_fin_data &lt;- counts %&gt;%\n  filter(n_obs &gt;= 500) %&gt;% # filter out participants with low no. of transactions\n  inner_join(fin_data, by = \"participantId\") %&gt;% # keep only relevant obs in fin_data\n  select(!contains(\"n_obs\")) # discard n_obs column\n\nThey will also be removed from the demographics dataset, since we are unsure if, for example, they have left the city for good.\n\nnew_p_data &lt;- counts %&gt;%\n  filter(n_obs &gt;= 500) %&gt;%\n  inner_join(p_data, by = \"participantId\") %&gt;%\n  select(!contains(\"n_obs\"))\n\n\n\n\n\n\n\nParticipants removed due to low number of check-ins in financial journal\n\n\n\nA total of 131 participants, out of the original 1011, were dropped from our datasets."
  },
  {
    "objectID": "take-home_ex/take-home_ex_01.html#getting-to-know-our-demographics-dataset",
    "href": "take-home_ex/take-home_ex_01.html#getting-to-know-our-demographics-dataset",
    "title": "Take-home Exercise 01",
    "section": "Getting to Know Our Demographics Dataset",
    "text": "Getting to Know Our Demographics Dataset\nThe City of Engagement has a population of 50,000. We have participants’ data with a sample size of 880, which should give us a decent representation of how the population looks like.\nFirstly, let’s perform some basic visualisations so that we can get to know our data better. Basic insights are provided in the subtitle of each plot.\n\nDemographics of Participants\n\nHousehold SizeKids?AgeEducation LevelInterest Group\n\n\n\n\nCode\n# Creating a data.frame containing the frequencies of householdSize in our dataset of 1,000 participants\nhs_counts &lt;- data.frame(table(new_p_data$householdSize))\ncolnames(hs_counts) &lt;- c(\"householdSize\", \"Freq\")\n\n# Adding a percentage variable based on the frequencies\nhs_counts$pct &lt;- percent(hs_counts$Freq / sum(hs_counts$Freq))\n\n# Choosing some nice colors for the plot\nnice_colors &lt;- c(\"#80b1d3\", \"#8dd3c7\", \"#bebada\")\n\n# Plotting (using coord_polar creates a pie chart from a stacked bar chart)\nggplot(hs_counts, aes(x = \"\", y = Freq, fill = factor(householdSize))) + \n  geom_bar(stat = \"identity\", width = 1, color = \"white\") +\n  geom_text(aes(label = pct), position = position_stack(vjust = 0.5)) +\n  coord_polar(\"y\", start = 0) +\n  labs(title = \"Household Size Distribution\",\n       subtitle = \"The most common household size is 1 and least common household size is 3.\",\n       fill = \"Household Size\") +\n  theme_void() +\n  scale_fill_manual(values = nice_colors, guide = guide_legend(reverse = TRUE)) +\n  theme(plot.title = element_text(face = \"bold\", size = 16),\n        plot.subtitle = element_text(size = 12))\n\n\n\n\n\n\n\n\n\nCode\n# Creating a data.frame containing the frequencies of haveKids in our dataset of 1,000 participants\nkids_counts &lt;- data.frame(table(new_p_data$haveKids))\ncolnames(kids_counts) &lt;- c(\"haveKids\", \"Freq\")\n\n# Adding a percentage variable based on the frequencies\nkids_counts$pct &lt;- percent(kids_counts$Freq / sum(kids_counts$Freq))\n\n# Choosing some nice colors for the plot\nnice_colors &lt;- c(\"#80b1d3\", \"#8dd3c7\")\n\n# Plotting (using coord_polar creates a pie chart from a stacked bar chart)\nggplot(kids_counts, aes(x = \"\", y = Freq, fill = factor(haveKids))) + \n  geom_bar(stat = \"identity\", width = 1, color = \"white\") +\n  geom_text(aes(label = pct), position = position_stack(vjust = 0.5)) +\n  coord_polar(\"y\", start = 0) +\n  labs(title = \"Distribution of Whether Participants Have Kids\",\n       subtitle = \"Most participants do not have kids. Only slightly less than a third have kids.\",\n       fill = \"Do participants have kids?\") +\n  theme_void() +\n  scale_fill_manual(values = nice_colors, guide = guide_legend(reverse = TRUE)) +\n  theme(plot.title = element_text(face = \"bold\", size = 16),\n        plot.subtitle = element_text(size = 12))\n\n\n\n\n\n\n\n\n\nCode\n# Calculate the mean, min, and max age\nmean_age &lt;- mean(new_p_data$age)\nmin_age &lt;- min(new_p_data$age)\nmax_age &lt;- max(new_p_data$age)\n\n# Choosing some nice colors for the plot\nnice_colors &lt;- c(\"#80b1d3\", \"#8dd3c7\", \"#bebada\", \"#fccde5\")\n\n# Plotting\nggplot(new_p_data, aes(x = age)) + \n  geom_histogram(breaks = c(18, 30, 40, 50, 60), fill = nice_colors, color = \"white\") +\n  labs(title = \"Age Distribution\",\n       subtitle = \"Participants are relatively evenly distributed across age groups.\",\n       x = \"Age\",\n       y = \"Counts\",\n       caption = \"Note:\\nFor geom_histogram(), all bins are left-inclusive and right-exclusive by default, except the rightmost bin,\\nwhich is both left and right-inclusive.\\nThe leftmost and rightmost bins have a larger binwidth of 12 and 11 years respectively, compared to the\\nmiddle two bins with binwidths of 10 years. Though not ideal for comparison, they are intuitive.\") +\n  theme_bw() +\n  theme(plot.title = element_text(face = \"bold\", size = 16),\n        plot.subtitle = element_text(size = 12),\n        plot.caption = element_text(size = 9.5, hjust = 0)) +\n  geom_vline(xintercept = mean_age, color = \"darkred\", linetype = \"dashed\") +\n  geom_vline(xintercept = min_age, color = \"darkred\", linetype = \"dashed\") +\n  geom_vline(xintercept = max_age, color = \"darkred\", linetype = \"dashed\") +\n  annotate(\"text\", x = mean_age + 4.2, y = 40, label = paste(\"Mean age:\", round(mean_age, 1)), color = \"darkred\") +\n  annotate(\"text\", x = min_age + 3.5, y = 40, label = paste(\"Min. age:\", round(min_age, 1)), color = \"darkred\") +\n  annotate(\"text\", x = max_age - 4, y = 40, label = paste(\"Max. age:\", round(max_age, 1)), color = \"darkred\") +\n  geom_text(aes(x = 23.5, y = 150, label = \"18-29\\nyears old\"), size = 3.5) +\n  geom_text(aes(x = 34, y = 150, label = \"30-39\\nyears old\"), size = 3.5) +\n  geom_text(aes(x = 44, y = 150, label = \"40-49\\nyears old\"), size = 3.5) +\n  geom_text(aes(x = 54.5, y = 150, label = \"50-60\\nyears old\"), size = 3.5) +\n  scale_y_continuous(breaks = breaks_width(50)) # this useful function is from the 'scales' package\n\n\n\n\n\n\n\n\n\nCode\n# Creating a data.frame containing the frequencies of educationLevel in our dataset of 1,000 participants\nedu_counts &lt;- data.frame(table(new_p_data$educationLevel))\ncolnames(edu_counts) &lt;- c(\"educationLevel\", \"Counts\")\n\n# Adding a percentage variable based on the frequencies\nedu_counts$pct &lt;- percent(edu_counts$Counts / sum(edu_counts$Counts))\n\n# Choosing some nice colors for the plot\nnice_colors &lt;- c(\"#80b1d3\", \"#8dd3c7\", \"#bebada\", \"#fccde5\")\n\n# Plot\nggplot(edu_counts, aes(x = educationLevel, y = Counts)) +\n  geom_bar(stat = \"identity\", fill = nice_colors, color = \"white\") +\n  labs(title = \"Education Level Distribution\", x = \"Education Level\", y = \"Counts\",\n       subtitle = \"This city is rather well-educated.\\n93.7% of participants have education higher than 'High School/College'.\\n45.7% have education higher than Bachelor's degree.\") +\n  theme_bw() +\n  theme(plot.title = element_text(face = \"bold\", size = 16),\n        plot.subtitle = element_text(size = 12)) +\n  geom_text(aes(label = pct), vjust = 1.5)\n\n\n\n\n\n\n\n\n\nCode\n# Creating a data.frame containing the frequencies of interestGroup in our dataset of 1,000 participants\ninterest_counts &lt;- data.frame(table(new_p_data$interestGroup))\ncolnames(interest_counts) &lt;- c(\"interestGroup\", \"Counts\")\n\n# Adding a percentage variable based on the frequencies\ninterest_counts$pct &lt;- percent(interest_counts$Counts / sum(interest_counts$Counts), accuracy = 0.1)\n\n# Plot\nggplot(interest_counts, aes(x = reorder(interestGroup, -Counts), y = Counts)) +\n  geom_bar(stat = \"identity\", fill = \"#80b1d3\", color = \"white\") +\n  labs(title = \"Interest Group Distribution\", x = \"Interest Group\", y = \"Counts\",\n       subtitle = \"Most common interest among participants is 'J', and least common interest is 'E'.\") +\n  theme_bw() +\n  theme(plot.title = element_text(face = \"bold\", size = 16),\n        plot.subtitle = element_text(size = 12)) +\n  geom_text(aes(label = pct), vjust = 1.5)"
  },
  {
    "objectID": "take-home_ex/take-home_ex_01.html#getting-to-know-our-financial-journal-dataset",
    "href": "take-home_ex/take-home_ex_01.html#getting-to-know-our-financial-journal-dataset",
    "title": "Take-home Exercise 01",
    "section": "Getting to Know Our Financial Journal Dataset",
    "text": "Getting to Know Our Financial Journal Dataset\nLet’s take a look at the length (no. of rows) of our new_fin_data, which is the financial journal for our 880 participants:\n\ncat(\"Output:\", \"There are\", nrow(new_fin_data), \"rows\", \"in our dataset.\", \"\\n\")\n\nOutput: There are 1509897 rows in our dataset. \n\n\nThis is rather large and it is due to the fact that each participant can have multiple transactions across different categories. To make the dataset more manageable without losing our ability to conduct meaningful analysis, we could extract the Month-Year from timestamp column that records the date and time of each record in POSIXct format. After extracting the Month-Year (as month_year), we will sum the total transaction amounts by participantId, category, and month_year:\n\ngrouped_data &lt;-\n  new_fin_data %&gt;%\n  mutate(month_year = floor_date(timestamp, \"month\")) %&gt;%\n  group_by(participantId, category, month_year) %&gt;%\n  summarise(total_amount = sum(amount)) %&gt;%\n  arrange(participantId, month_year) # sort by ascending\n\n\nhead(grouped_data, 10)\n\n# A tibble: 10 × 4\n# Groups:   participantId, category [5]\n   participantId category   month_year          total_amount\n           &lt;int&gt; &lt;fct&gt;      &lt;dttm&gt;                     &lt;dbl&gt;\n 1             0 Education  2022-03-01 00:00:00        -38.0\n 2             0 Food       2022-03-01 00:00:00       -268. \n 3             0 Recreation 2022-03-01 00:00:00       -349. \n 4             0 Shelter    2022-03-01 00:00:00       -555. \n 5             0 Wage       2022-03-01 00:00:00      11932. \n 6             0 Education  2022-04-01 00:00:00        -38.0\n 7             0 Food       2022-04-01 00:00:00       -266. \n 8             0 Recreation 2022-04-01 00:00:00       -219. \n 9             0 Shelter    2022-04-01 00:00:00       -555. \n10             0 Wage       2022-04-01 00:00:00       8637. \n\n\nWith this grouped dataset, we can clearly see the expenditure/income for each participant, category, and month-year.\n\ncat(\"Output:\", \"There are\", nrow(grouped_data), \"rows\", \"in our new dataset.\", \"\\n\")\n\nOutput: There are 44208 rows in our new dataset. \n\n\nThis is a much smaller dataset, which is more manageable, while still providing insights at the monthly interval.\nLet’s explore the Financial Journal data over time to see if there are any trends. We will do this by plotting the mean, maximum, and minimum total_amount earned/spent from all participants, grouped by category and month_year, over month_year.\n\n\nCode\n# Calculate the mean, minimum, and maximum total_amount over all participantId for each category\ngrouped_data_summary &lt;- grouped_data %&gt;%\n  group_by(category, month_year) %&gt;%\n  summarise(mean_total_amount = mean(abs(total_amount)),\n            min_total_amount = min(abs(total_amount)),\n            max_total_amount = max(abs(total_amount)))\n\n# Create a time series plot with mean, min, and max for each category using facets\nggplot(grouped_data_summary, aes(x = month_year, y = mean_total_amount, color = category)) +\n  geom_line() +\n  geom_ribbon(aes(ymin = min_total_amount, ymax = max_total_amount, fill = category), alpha = 0.3) +\n  labs(x = \"Month/Year\", y = \"Amount ($)\",\n       title = \"Mean/Max/Min Amount by Category over Time\",\n       subtitle = \"RentAdjustment and Wage are earnings, the rest are expenses\") +\n  scale_fill_discrete(name = \"Category\") +\n  scale_color_discrete(name = \"Category\") +\n  theme_bw() +\n  facet_wrap(~category, nrow = 3, scales = \"free_y\") +\n  guides(color = \"none\", fill = \"none\") +\n  scale_x_datetime(date_minor_breaks = \"1 month\", date_labels = \"%b-%Y\")\n\n\n\n\n\nWe can see that the mean, minimum, and maximum amounts for each category is relatively stable over time. The exceptions are:\n\nShelter and RentAdjustment experience ‘shocks’ on Mar-2022, and the effects linger for a month until Apr-2022, after which Shelter stabilises while RentAdjustment becomes zero.\nMinor ‘shock’ for Wage on Mar-2022 as well.\nHigh volatility for the maximum amount spent on Recreation over time. This makes sense as it is most likely spending on luxury items, as compared to the other expense categories, which are more like necessities (e.g., Education, Food, Shelter).\n\nSince most of the time series are relatively stable, we can move on to conduct our analysis on aggregated data (aggregated over time). This removes one dimension from the analysis, making it less complicated."
  },
  {
    "objectID": "take-home_ex/take-home_ex_01.html#aggregating-financial-journal-data-over-time-and-merging-datasets",
    "href": "take-home_ex/take-home_ex_01.html#aggregating-financial-journal-data-over-time-and-merging-datasets",
    "title": "Take-home Exercise 01",
    "section": "Aggregating Financial Journal Data over Time and Merging Datasets",
    "text": "Aggregating Financial Journal Data over Time and Merging Datasets\nWe will take the mean of total_amount over month_year to obtain mean monthly amounts earned/spent by each participant for each category. We will not include RentAdjustment as it seems like a one-off occurrence.\n\naggregated_data &lt;- grouped_data %&gt;%\n  group_by(participantId, category) %&gt;%\n  summarise(monthly_total_amount = mean(total_amount))\nhead(aggregated_data)\n\n# A tibble: 6 × 3\n# Groups:   participantId [2]\n  participantId category   monthly_total_amount\n          &lt;int&gt; &lt;fct&gt;                     &lt;dbl&gt;\n1             0 Education                 -38.0\n2             0 Food                     -262. \n3             0 Recreation               -365. \n4             0 Shelter                  -555. \n5             0 Wage                     9151. \n6             1 Education                 -38.0\n\n\nLet’s merge this aggregated data with the demographics dataset so that we can see the earnings/expense by demographics:\n\nmerged_data &lt;- inner_join(aggregated_data, new_p_data, by = \"participantId\")\nhead(merged_data)\n\n# A tibble: 6 × 9\n# Groups:   participantId [2]\n  participantId category   monthly_total_amount householdSize haveKids   age\n          &lt;int&gt; &lt;fct&gt;                     &lt;dbl&gt;         &lt;int&gt; &lt;lgl&gt;    &lt;int&gt;\n1             0 Education                 -38.0             3 TRUE        36\n2             0 Food                     -262.              3 TRUE        36\n3             0 Recreation               -365.              3 TRUE        36\n4             0 Shelter                  -555.              3 TRUE        36\n5             0 Wage                     9151.              3 TRUE        36\n6             1 Education                 -38.0             3 TRUE        25\n# ℹ 3 more variables: educationLevel &lt;ord&gt;, interestGroup &lt;chr&gt;,\n#   joviality &lt;dbl&gt;"
  },
  {
    "objectID": "take-home_ex/take-home_ex_01.html#who-spends-most-on-education",
    "href": "take-home_ex/take-home_ex_01.html#who-spends-most-on-education",
    "title": "Take-home Exercise 01",
    "section": "Who Spends Most on Education?",
    "text": "Who Spends Most on Education?\nIntuitively, households with children should spend the most on education. In this section, we will see from the data whether this is really the case.\nThe following tables/plots show the monthly amount spent on Education when grouped by the respective variables:\n\nHousehold SizeKids?Education Level\n\n\n\ntmp &lt;- merged_data %&gt;%\n  filter(category == \"Education\") %&gt;%\n  group_by(householdSize) %&gt;%\n  summarise(average_monthly_amount = mean(monthly_total_amount))\ntmp\n\n# A tibble: 1 × 2\n  householdSize average_monthly_amount\n          &lt;int&gt;                  &lt;dbl&gt;\n1             3                  -46.2\n\n\n\n\n\n Only those with householdSize = 3 spend on education, which makes sense since kids are present in households of size 3. \n\n\n\n\n\ntmp &lt;- merged_data %&gt;%\n  filter(category == \"Education\") %&gt;%\n  group_by(haveKids) %&gt;%\n  summarise(average_monthly_amount = mean(monthly_total_amount))\ntmp\n\n# A tibble: 1 × 2\n  haveKids average_monthly_amount\n  &lt;lgl&gt;                     &lt;dbl&gt;\n1 TRUE                      -46.2\n\n\n\n\n\n Only those who have kids will spend on education. \n\n\n\n\n\n\nCode\ntmp &lt;- merged_data %&gt;%\n  filter(category == \"Education\") %&gt;%\n  group_by(educationLevel) %&gt;%\n  summarise(average_monthly_amount = mean(monthly_total_amount))\n\nggplot(tmp, aes(x = educationLevel, y = abs(average_monthly_amount))) +\n  geom_bar(stat = \"identity\", fill = \"#80b1d3\") +\n  labs(title = \"Average Monthly Amount Spent on Education by Education Level\",\n       subtitle = \"Graduates spend the most on education.\",\n       x = \"\\nEducation Level\",\n       y = \"Average Monthly Amount\\nSpent on Education ($)\\n\") +\n  theme_bw() +\n  theme(plot.title = element_text(face = \"bold\", size = 14),\n        plot.subtitle = element_text(size = 12))\n\n\n\n\n\n\n\n\nConclusions:\n\nConfirmed that only households with kids spend on education.\nGraduates spend the most on education, though not by far."
  },
  {
    "objectID": "take-home_ex/take-home_ex_01.html#who-spends-most-on-food",
    "href": "take-home_ex/take-home_ex_01.html#who-spends-most-on-food",
    "title": "Take-home Exercise 01",
    "section": "Who Spends Most on Food?",
    "text": "Who Spends Most on Food?\nThe following plots show the monthly amount spent on Food when grouped by the respective variables:\n\nHousehold SizeKids?AgeEducation LevelInterest Group\n\n\n\n\nCode\ntmp &lt;- merged_data %&gt;%\n  filter(category == \"Food\") %&gt;%\n  group_by(householdSize) %&gt;%\n  summarise(average_monthly_amount = mean(monthly_total_amount))\n\nggplot(tmp, aes(x = householdSize, y = abs(average_monthly_amount))) +\n  geom_bar(stat = \"identity\", fill = \"#80b1d3\") +\n  labs(title = \"Average Monthly Amount Spent on Food by Household Size\",\n       subtitle = \"Surprisingly, Household Size and Amount Spent on Food are not positively correlated\",\n       x = \"\\nHousehold Size\",\n       y = \"Average Monthly Amount\\nSpent on Food ($)\\n\") +\n  theme_bw() +\n  theme(plot.title = element_text(face = \"bold\", size = 14),\n        plot.subtitle = element_text(size = 11.5))\n\n\n\n\n\n\n\n\n\nCode\ntmp &lt;- merged_data %&gt;%\n  filter(category == \"Food\") %&gt;%\n  group_by(haveKids) %&gt;%\n  summarise(average_monthly_amount = mean(monthly_total_amount))\n\nggplot(tmp, aes(x = haveKids, y = abs(average_monthly_amount))) +\n  geom_bar(stat = \"identity\", fill = \"#80b1d3\") +\n  labs(title = \"Average Monthly Amount Spent on Food by Presence of Kids\",\n       subtitle = \"Presence of kids does not affect amount spent on food\",\n       x = \"\\nParticipants have kids?\",\n       y = \"Average Monthly Amount\\nSpent on Food ($)\\n\") +\n  theme_bw() +\n  theme(plot.title = element_text(face = \"bold\", size = 14),\n        plot.subtitle = element_text(size = 12))\n\n\n\n\n\n\n\n\n\nCode\nmerged_data$ageGroup &lt;- cut(merged_data$age,\n                            breaks = c(0, 29, 39, 49, Inf),\n                            labels = c(\"18-29\", \"30-39\", \"40-49\", \"50-60\"))\n\ntmp &lt;- merged_data %&gt;%\n  filter(category == \"Food\") %&gt;%\n  group_by(ageGroup) %&gt;%\n  summarise(average_monthly_amount = mean(monthly_total_amount))\n\nggplot(tmp, aes(x = ageGroup, y = abs(average_monthly_amount))) +\n  geom_bar(stat = \"identity\", fill = \"#80b1d3\") +\n  labs(title = \"Average Monthly Amount Spent on Food by Age Group\",\n       subtitle = \"Age does not seem to affect amount spent on food.\",\n       x = \"\\nAge Group\",\n       y = \"Average Monthly Amount\\nSpent on Food ($)\\n\") +\n  theme_bw() +\n  theme(plot.title = element_text(face = \"bold\", size = 14),\n        plot.subtitle = element_text(size = 12))\n\n\n\n\n\n\n\n\n\nCode\ntmp &lt;- merged_data %&gt;%\n  filter(category == \"Food\") %&gt;%\n  group_by(educationLevel) %&gt;%\n  summarise(average_monthly_amount = mean(monthly_total_amount))\n\nggplot(tmp, aes(x = educationLevel, y = abs(average_monthly_amount))) +\n  geom_bar(stat = \"identity\", fill = \"#80b1d3\") +\n  labs(title = \"Average Monthly Amount Spent on Food by Education Level\",\n       subtitle = \"Slight positive correlation between education level and amount spent on food.\",\n       x = \"\\nEducation Level\",\n       y = \"Average Monthly Amount\\nSpent on Food ($)\\n\") +\n  theme_bw() +\n  theme(plot.title = element_text(face = \"bold\", size = 14),\n        plot.subtitle = element_text(size = 12))\n\n\n\n\n\n\n\n\n\nCode\ntmp &lt;- merged_data %&gt;%\n  filter(category == \"Food\") %&gt;%\n  group_by(interestGroup) %&gt;%\n  summarise(average_monthly_amount = mean(monthly_total_amount))\n\nggplot(tmp, aes(x = reorder(interestGroup, -abs(average_monthly_amount)), y = abs(average_monthly_amount))) +\n  geom_bar(stat = \"identity\", fill = \"#80b1d3\") +\n  labs(title = \"Average Monthly Amount Spent on Food by Interest Group\",\n       subtitle = \"Slight differences in amount spent on food across interest groups\",\n       x = \"\\nInterest Group\",\n       y = \"Average Monthly Amount\\nSpent on Food ($)\\n\") +\n  theme_bw() +\n  theme(plot.title = element_text(face = \"bold\", size = 14),\n        plot.subtitle = element_text(size = 12))\n\n\n\n\n\n\n\n\nConclusions:\n\nhouseholdSize and haveKids do not appear to affect how much is spent monthly on food, which is quite puzzling. Could it be the case that household members eat less to accommodate a larger family?\neducationLevel shows a slight positive correlation with amount spent monthly on food (based on the plot). However, a caveat is that educationLevel may also be positively correlated with wage. This is shown to be the case later on."
  },
  {
    "objectID": "take-home_ex/take-home_ex_01.html#who-spends-most-on-recreation",
    "href": "take-home_ex/take-home_ex_01.html#who-spends-most-on-recreation",
    "title": "Take-home Exercise 01",
    "section": "Who Spends Most on Recreation?",
    "text": "Who Spends Most on Recreation?\nThe following plots show the monthly amount spent on Recreation when grouped by the respective variables:\n\nHousehold SizeKids?AgeEducation LevelInterest Group\n\n\n\n\nCode\ntmp &lt;- merged_data %&gt;%\n  filter(category == \"Recreation\") %&gt;%\n  group_by(householdSize) %&gt;%\n  summarise(average_monthly_amount = mean(monthly_total_amount))\n\nggplot(tmp, aes(x = householdSize, y = abs(average_monthly_amount))) +\n  geom_bar(stat = \"identity\", fill = \"#80b1d3\") +\n  labs(title = \"Average Monthly Amount Spent on Recreation by Household Size\",\n       subtitle = \"Slight increase in spending on recreation when household size increases\",\n       x = \"\\nHousehold Size\",\n       y = \"Average Monthly Amount\\nSpent on Recreation ($)\\n\") +\n  theme_bw() +\n  theme(plot.title = element_text(face = \"bold\", size = 14),\n        plot.subtitle = element_text(size = 12))\n\n\n\n\n\n\n\n\n\nCode\ntmp &lt;- merged_data %&gt;%\n  filter(category == \"Recreation\") %&gt;%\n  group_by(haveKids) %&gt;%\n  summarise(average_monthly_amount = mean(monthly_total_amount))\n\nggplot(tmp, aes(x = haveKids, y = abs(average_monthly_amount))) +\n  geom_bar(stat = \"identity\", fill = \"#80b1d3\") +\n  labs(title = \"Average Monthly Amount Spent on Recreation by Presence of Kids\",\n       subtitle = \"Slight increase in spending on recreation when participants have kids.\",\n       x = \"\\nParticipants have kids?\",\n       y = \"Average Monthly Amount\\nSpent on Recreation ($)\\n\") +\n  theme_bw() +\n  theme(plot.title = element_text(face = \"bold\", size = 14),\n        plot.subtitle = element_text(size = 12))\n\n\n\n\n\n\n\n\n\nCode\ntmp &lt;- merged_data %&gt;%\n  filter(category == \"Recreation\") %&gt;%\n  group_by(ageGroup) %&gt;%\n  summarise(average_monthly_amount = mean(monthly_total_amount))\n\nggplot(tmp, aes(x = ageGroup, y = abs(average_monthly_amount))) +\n  geom_bar(stat = \"identity\", fill = \"#80b1d3\") +\n  labs(title = \"Average Monthly Amount Spent on Recreation by Age Group\",\n       subtitle = \"Roughly equal spending on recreation across age groups.\",\n       x = \"\\nAge Group\",\n       y = \"Average Monthly Amount\\nSpent on Recreation ($)\\n\") +\n  theme_bw() +\n  theme(plot.title = element_text(face = \"bold\", size = 14),\n        plot.subtitle = element_text(size = 12))\n\n\n\n\n\n\n\n\n\nCode\ntmp &lt;- merged_data %&gt;%\n  filter(category == \"Recreation\") %&gt;%\n  group_by(educationLevel) %&gt;%\n  summarise(average_monthly_amount = mean(monthly_total_amount))\n\nggplot(tmp, aes(x = educationLevel, y = abs(average_monthly_amount))) +\n  geom_bar(stat = \"identity\", fill = \"#80b1d3\") +\n  labs(title = \"Average Monthly Amount Spent on Recreation by Education Level\",\n       subtitle = \"Roughly equal spending on recreation across education levels.\",\n       x = \"\\nEducation Level\",\n       y = \"Average Monthly Amount\\nSpent on Recreation ($)\\n\") +\n  theme_bw() +\n  theme(plot.title = element_text(face = \"bold\", size = 14),\n        plot.subtitle = element_text(size = 12))\n\n\n\n\n\n\n\n\n\nCode\ntmp &lt;- merged_data %&gt;%\n  filter(category == \"Recreation\") %&gt;%\n  group_by(interestGroup) %&gt;%\n  summarise(average_monthly_amount = mean(monthly_total_amount))\n\nggplot(tmp, aes(x = reorder(interestGroup, -abs(average_monthly_amount)), y = abs(average_monthly_amount))) +\n  geom_bar(stat = \"identity\", fill = \"#80b1d3\") +\n  labs(title = \"Average Monthly Amount Spent on Recreation by Interest Group\",\n       subtitle = \"Slight differences in spending on recreation across interest groups.\\nCould some interest groups be more expensive than the others?\",\n       x = \"\\nInterest Group\",\n       y = \"Average Monthly Amount\\nSpent on Recreation ($)\\n\") +\n  theme_bw() +\n  theme(plot.title = element_text(face = \"bold\", size = 14),\n        plot.subtitle = element_text(size = 12))\n\n\n\n\n\n\n\n\nConclusions:\n\nSlight increases in spending on recreation when householdSize increases and when haveKids is true.\nSome interest groups may cost more than the others. However, it is difficult to ascertain, based on the data, whether spending on recreation equates to spending on interest groups."
  },
  {
    "objectID": "take-home_ex/take-home_ex_01.html#who-spends-most-on-shelter",
    "href": "take-home_ex/take-home_ex_01.html#who-spends-most-on-shelter",
    "title": "Take-home Exercise 01",
    "section": "Who Spends Most on Shelter?",
    "text": "Who Spends Most on Shelter?\nThe following plots show the monthly amount spent on Shelter when grouped by the respective variables:\n\nHousehold SizeKids?AgeEducation Level\n\n\n\n\nCode\ntmp &lt;- merged_data %&gt;%\n  filter(category == \"Shelter\") %&gt;%\n  group_by(householdSize) %&gt;%\n  summarise(average_monthly_amount = mean(monthly_total_amount))\n\nggplot(tmp, aes(x = householdSize, y = abs(average_monthly_amount))) +\n  geom_bar(stat = \"identity\", fill = \"#80b1d3\") +\n  labs(title = \"Average Monthly Amount Spent on Shelter by Household Size\",\n       subtitle = \"Larger households spend a lot more on shelter as compared to singles.\",\n       x = \"\\nHousehold Size\",\n       y = \"Average Monthly Amount\\nSpent on Shelter ($)\\n\") +\n  theme_bw() +\n  theme(plot.title = element_text(face = \"bold\", size = 14),\n        plot.subtitle = element_text(size = 12))\n\n\n\n\n\n\n\n\n\nCode\ntmp &lt;- merged_data %&gt;%\n  filter(category == \"Shelter\") %&gt;%\n  group_by(haveKids) %&gt;%\n  summarise(average_monthly_amount = mean(monthly_total_amount))\n\nggplot(tmp, aes(x = haveKids, y = abs(average_monthly_amount))) +\n  geom_bar(stat = \"identity\", fill = \"#80b1d3\") +\n  labs(title = \"Average Monthly Amount Spent on Shelter by Presence of Kids\",\n       subtitle = \"Participants who have kids spend more on shelter.\",\n       x = \"\\nParticipants have kids?\",\n       y = \"Average Monthly Amount\\nSpent on Shelter ($)\\n\") +\n  theme_bw() +\n  theme(plot.title = element_text(face = \"bold\", size = 14),\n        plot.subtitle = element_text(size = 12))\n\n\n\n\n\n\n\n\n\nCode\ntmp &lt;- merged_data %&gt;%\n  filter(category == \"Shelter\") %&gt;%\n  group_by(ageGroup) %&gt;%\n  summarise(average_monthly_amount = mean(monthly_total_amount))\n\nggplot(tmp, aes(x = ageGroup, y = abs(average_monthly_amount))) +\n  geom_bar(stat = \"identity\", fill = \"#80b1d3\") +\n  labs(title = \"Average Monthly Amount Spent on Shelter by Age Group\",\n       subtitle = \"Roughly equal spending on shelter across age groups.\",\n       x = \"\\nAge Group\",\n       y = \"Average Monthly Amount\\nSpent on Shelter ($)\\n\") +\n  theme_bw() +\n  theme(plot.title = element_text(face = \"bold\", size = 14),\n        plot.subtitle = element_text(size = 12))\n\n\n\n\n\n\n\n\n\nCode\ntmp &lt;- merged_data %&gt;%\n  filter(category == \"Shelter\") %&gt;%\n  group_by(educationLevel) %&gt;%\n  summarise(average_monthly_amount = mean(monthly_total_amount))\n\nggplot(tmp, aes(x = educationLevel, y = abs(average_monthly_amount))) +\n  geom_bar(stat = \"identity\", fill = \"#80b1d3\") +\n  labs(title = \"Average Monthly Amount Spent on Shelter by Education Level\",\n       subtitle = \"Spending on shelter increases as education level increases.\",\n       x = \"\\nEducation Level\",\n       y = \"Average Monthly Amount\\nSpent on Shelter ($)\\n\") +\n  theme_bw() +\n  theme(plot.title = element_text(face = \"bold\", size = 14),\n        plot.subtitle = element_text(size = 12))\n\n\n\n\n\n\n\n\nConclusions:\n\nBoth householdSize &gt; 1 and haveKids = TRUE lead to an observed increase in spending on shelter. This makes sense, as a larger household requires more living space.\neducationLevel shows a positive correlation with amount spent monthly on shelter (based on the plot, similar to the case for food). However, a caveat is that educationLevel may also be positively correlated with wage. This is shown to be the case later on."
  },
  {
    "objectID": "take-home_ex/take-home_ex_01.html#who-earns-most",
    "href": "take-home_ex/take-home_ex_01.html#who-earns-most",
    "title": "Take-home Exercise 01",
    "section": "Who Earns Most?",
    "text": "Who Earns Most?\nBased on our previous plots for spending on food and shelter across education levels, we observe slight positive correlations. In this section, we will check if wage is also positively correlated with education. If that is the case, the increase in spending on food and shelter may also be due to increase in wage.\nMore generally, we will explore which demographic group earn the most in terms of wages.\n\nHousehold SizeKids?AgeEducation Level\n\n\n\n\nCode\ntmp &lt;- merged_data %&gt;%\n  filter(category == \"Wage\") %&gt;%\n  group_by(householdSize) %&gt;%\n  summarise(average_monthly_amount = mean(monthly_total_amount))\n\nggplot(tmp, aes(x = householdSize, y = average_monthly_amount)) +\n  geom_bar(stat = \"identity\", fill = \"#80b1d3\") +\n  labs(title = \"Average Monthly Wages by Household Size\",\n       subtitle = \"Participants with larger households earn more in wages.\",\n       x = \"\\nHousehold Size\",\n       y = \"Average Monthly Wages ($)\\n\") +\n  theme_bw() +\n  theme(plot.title = element_text(face = \"bold\", size = 14),\n        plot.subtitle = element_text(size = 12))\n\n\n\n\n\n\n\n\n\nCode\ntmp &lt;- merged_data %&gt;%\n  filter(category == \"Wage\") %&gt;%\n  group_by(haveKids) %&gt;%\n  summarise(average_monthly_amount = mean(monthly_total_amount))\n\nggplot(tmp, aes(x = haveKids, y = average_monthly_amount)) +\n  geom_bar(stat = \"identity\", fill = \"#80b1d3\") +\n  labs(title = \"Average Monthly Wages by Presence of Kids\",\n       subtitle = \"Participants with kids earn more in wages.\",\n       x = \"\\nParticipants have kids?\",\n       y = \"Average Monthly Wages ($)\\n\") +\n  theme_bw() +\n  theme(plot.title = element_text(face = \"bold\", size = 14),\n        plot.subtitle = element_text(size = 12))\n\n\n\n\n\n\n\n\n\nCode\ntmp &lt;- merged_data %&gt;%\n  filter(category == \"Wage\") %&gt;%\n  group_by(ageGroup) %&gt;%\n  summarise(average_monthly_amount = mean(monthly_total_amount))\n\nggplot(tmp, aes(x = ageGroup, y = average_monthly_amount)) +\n  geom_bar(stat = \"identity\", fill = \"#80b1d3\") +\n  labs(title = \"Average Monthly Wages by Age Group\",\n       subtitle = \"Wages do not increase with age.\",\n       x = \"\\nAge Group\",\n       y = \"Average Monthly Wages ($)\\n\") +\n  theme_bw() +\n  theme(plot.title = element_text(face = \"bold\", size = 14),\n        plot.subtitle = element_text(size = 12))\n\n\n\n\n\n\n\n\n\nCode\ntmp &lt;- merged_data %&gt;%\n  filter(category == \"Wage\") %&gt;%\n  group_by(educationLevel) %&gt;%\n  summarise(average_monthly_amount = mean(monthly_total_amount))\n\nggplot(tmp, aes(x = educationLevel, y = average_monthly_amount)) +\n  geom_bar(stat = \"identity\", fill = \"#80b1d3\") +\n  labs(title = \"Average Monthly Wages by Education Level\",\n       subtitle = \"Wages increase as education level increases.\",\n       x = \"\\nEducation Level\",\n       y = \"Average Monthly Wages ($)\\n\") +\n  theme_bw() +\n  theme(plot.title = element_text(face = \"bold\", size = 14),\n        plot.subtitle = element_text(size = 12))\n\n\n\n\n\n\n\n\nConclusions:\n\nParticipants earn more in wages when householdSize increases and when they have kids. Could it be that they work harder when they have a family?\nWages do not increase when participants’ age increases. This is rather surprising and seems to suggest that jobs in this city (perhaps due to their agricultural nature) do not come with increments over time, and that having more experience does not command higher wages.\nWages increase as education level of participants increases."
  },
  {
    "objectID": "take-home_ex/take-home_ex_01.html#does-higher-wage-equate-more-happiness",
    "href": "take-home_ex/take-home_ex_01.html#does-higher-wage-equate-more-happiness",
    "title": "Take-home Exercise 01",
    "section": "Does Higher Wage Equate More Happiness?",
    "text": "Does Higher Wage Equate More Happiness?\nThere is still one more variable that we have yet to explore - joviality in the demographics dataset.\nLet’s explore the relationship between joviality and average monthly wages using an interactive plot:\n\n# Add wage and ageGroup to our data\nwage &lt;- merged_data %&gt;%\n  filter(category == \"Wage\") %&gt;%\n  select(participantId, monthly_wage = monthly_total_amount)\ntmp &lt;- inner_join(new_p_data, wage, by = \"participantId\")\ntmp$ageGroup &lt;- cut(\n  tmp$age,\n  breaks = c(0, 29, 39, 49, Inf),\n  labels = c(\"18-29\", \"30-39\", \"40-49\", \"50-60\")\n)\n\n# Add tooltip information\ntooltip &lt;- c(paste(\"Wage: $\", tmp$monthly_wage %&gt;% round(0),\n                   \"\\nJoviality: \", tmp$joviality %&gt;% round(2),\n                   \"\\n\",\n                   \"\\nID: \", tmp$participantId,\n                   \"\\nHousehold Size: \", tmp$householdSize,\n                   \"\\nHave kids?: \", tmp$haveKids,\n                   \"\\nAge: \", tmp$age,\n                   \"\\nEducation Level: \", tmp$educationLevel,\n                   \"\\nInterest Group: \", tmp$interestGroup,\n                   sep = \"\"))\n\n\nChoose the variables to colour by:\n\nHousehold SizeKids?AgeEducation LevelInterest Group\n\n\n\n\nCode\nplt &lt;- ggplot(tmp, aes(x = monthly_wage,\n                       y = joviality)) +\n  geom_point_interactive(\n    aes(\n      tooltip = tooltip,\n      data_id = householdSize,\n      color = factor(householdSize)\n      ),\n    size = 1.5) +\n  scale_color_brewer(type = \"qual\", palette = \"Set2\") +\n  labs(\n    x = \"Monthly Wage\",\n    y = \"Joviality\",\n    title = \"Scatterplot of Joviality vs. Monthly Wage\",\n    subtitle = \"Points coloured by Household Size\",\n    color = \"Household Size\"\n  ) +\n  theme_bw() +\n  theme(\n    axis.title = element_text(size = 10, face = \"bold\"),\n    plot.title = element_text(size = 14, face = \"bold\"),\n    plot.subtitle = element_text(size = 12),\n    legend.title = element_text(size = 10)\n  )\n\ngirafe(ggobj = plt,\n       options = list(opts_hover(css = ''),\n                      opts_hover_inv(css = \"opacity: 0.3;\")))\n\n\n\n\n\n\n\n\n\n\nCode\nplt &lt;- ggplot(tmp, aes(x = monthly_wage,\n                       y = joviality)) +\n  geom_point_interactive(\n    aes(\n      tooltip = tooltip,\n      data_id = haveKids,\n      color = factor(haveKids)\n      ),\n    size = 1.5) +\n  scale_color_brewer(type = \"qual\", palette = \"Set2\") +\n  labs(\n    x = \"Monthly Wage\",\n    y = \"Joviality\",\n    title = \"Scatterplot of Joviality vs. Monthly Wage\",\n    subtitle = \"Points coloured by Presence of Kids\",\n    color = \"Presence of Kids\"\n  ) +\n  theme_bw() +\n  theme(\n    axis.title = element_text(size = 10, face = \"bold\"),\n    plot.title = element_text(size = 14, face = \"bold\"),\n    plot.subtitle = element_text(size = 12),\n    legend.title = element_text(size = 10)\n  )\n\ngirafe(ggobj = plt,\n       options = list(opts_hover(css = ''),\n                      opts_hover_inv(css = \"opacity: 0.3;\")))\n\n\n\n\n\n\n\n\n\n\nCode\nplt &lt;- ggplot(tmp, aes(x = monthly_wage,\n                       y = joviality)) +\n  geom_point_interactive(\n    aes(\n      tooltip = tooltip,\n      data_id = ageGroup,\n      color = factor(ageGroup)\n      ),\n    size = 1.5) +\n  scale_color_brewer(type = \"qual\", palette = \"Set2\") +\n  labs(\n    x = \"Monthly Wage\",\n    y = \"Joviality\",\n    title = \"Scatterplot of Joviality vs. Monthly Wage\",\n    subtitle = \"Points coloured by Age Group\",\n    color = \"Age Group\"\n  ) +\n  theme_bw() +\n  theme(\n    axis.title = element_text(size = 10, face = \"bold\"),\n    plot.title = element_text(size = 14, face = \"bold\"),\n    plot.subtitle = element_text(size = 12),\n    legend.title = element_text(size = 10)\n  )\n\ngirafe(ggobj = plt,\n       options = list(opts_hover(css = ''),\n                      opts_hover_inv(css = \"opacity: 0.3;\")))\n\n\n\n\n\n\n\n\n\n\nCode\nplt &lt;- ggplot(tmp, aes(x = monthly_wage,\n                       y = joviality)) +\n  geom_point_interactive(\n    aes(\n      tooltip = tooltip,\n      data_id = educationLevel,\n      color = factor(educationLevel)\n      ),\n    size = 1.5) +\n  scale_color_brewer(type = \"qual\", palette = \"Set2\") +\n  labs(\n    x = \"Monthly Wage\",\n    y = \"Joviality\",\n    title = \"Scatterplot of Joviality vs. Monthly Wage\",\n    subtitle = \"Points coloured by Education Level\",\n    color = \"Education Level\"\n  ) +\n  theme_bw() +\n  theme(\n    axis.title = element_text(size = 10, face = \"bold\"),\n    plot.title = element_text(size = 14, face = \"bold\"),\n    plot.subtitle = element_text(size = 12),\n    legend.title = element_text(size = 10)\n  )\n\ngirafe(ggobj = plt,\n       options = list(opts_hover(css = ''),\n                      opts_hover_inv(css = \"opacity: 0.3;\")))\n\n\n\n\n\n\n\n\n\n\nCode\nplt &lt;- ggplot(tmp, aes(x = monthly_wage,\n                       y = joviality)) +\n  geom_point_interactive(\n    aes(\n      tooltip = tooltip,\n      data_id = interestGroup,\n      color = factor(interestGroup)\n      ),\n    size = 1.5) +\n  scale_color_brewer(type = \"qual\", palette = \"Set3\") +\n  labs(\n    x = \"Monthly Wage\",\n    y = \"Joviality\",\n    title = \"Scatterplot of Joviality vs. Monthly Wage\",\n    subtitle = \"Points coloured by Interest Group\",\n    color = \"Interest Group\"\n  ) +\n  theme_bw() +\n  theme(\n    axis.title = element_text(size = 10, face = \"bold\"),\n    plot.title = element_text(size = 14, face = \"bold\"),\n    plot.subtitle = element_text(size = 12),\n    legend.title = element_text(size = 10)\n  )\n\ngirafe(ggobj = plt,\n       options = list(opts_hover(css = ''),\n                      opts_hover_inv(css = \"opacity: 0.3;\")))\n\n\n\n\n\n\n\n\n\nConclusions:\n\nWhen colouring our data points by educationLevel, we can see that the points are grouped together somewhat by educationLevel. The higher the educationLevel, the higher the monthly wage. However, all variables do not seem to have any clear relationship with joviality (points are evenly spread out across the y-axis).\nThere is no clear relationship between joviality and monthly wage. Money is not correlated with happiness (at least for this sample of participants)."
  },
  {
    "objectID": "take-home_ex/take-home_ex_01.html#verifying-insights-from-visual-plots-using-analysis-of-variance-anova",
    "href": "take-home_ex/take-home_ex_01.html#verifying-insights-from-visual-plots-using-analysis-of-variance-anova",
    "title": "Take-home Exercise 01",
    "section": "Verifying Insights from Visual Plots Using Analysis of Variance (ANOVA)",
    "text": "Verifying Insights from Visual Plots Using Analysis of Variance (ANOVA)\nEarlier, based on our earlier plots, we derived the following insights:\n\nhouseholdSize, haveKids, and educationLevel exhibit a visually noticeable positive relationship with monthly wage\nVariables did not exhibit any visually noticeable relationships with joviality.\n\nWe will now use ANOVA models to verify our earlier conclusions:\n\nANOVA with monthly_wage as dependent variable\n\nmodel &lt;- aov(monthly_wage ~ householdSize + haveKids + ageGroup + educationLevel + interestGroup,\n            data = tmp)\nsummary(model)\n\n                Df    Sum Sq   Mean Sq F value Pr(&gt;F)    \nhouseholdSize    1 2.920e+08 292022588  87.440 &lt;2e-16 ***\nhaveKids         1 1.360e+07  13602319   4.073 0.0439 *  \nageGroup         3 2.584e+06    861352   0.258 0.8557    \neducationLevel   3 1.453e+09 484438161 145.055 &lt;2e-16 ***\ninterestGroup    9 2.101e+07   2334850   0.699 0.7101    \nResiduals      862 2.879e+09   3339693                   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nhouseholdSize, haveKids, and educationLevel have p-values &lt; 0.05, indicating that their effects on monthly wage are significant at the 5% level. This verifies our first insight.\n\n\nANOVA with joviality as dependent variable\n\nmodel &lt;- aov(joviality ~ householdSize + haveKids + ageGroup + educationLevel + interestGroup,\n            data = tmp)\nsummary(model)\n\n                Df Sum Sq Mean Sq F value  Pr(&gt;F)   \nhouseholdSize    1   0.20  0.1992   2.455 0.11749   \nhaveKids         1   0.00  0.0017   0.021 0.88405   \nageGroup         3   0.52  0.1741   2.146 0.09294 . \neducationLevel   3   1.16  0.3850   4.745 0.00274 **\ninterestGroup    9   0.73  0.0812   1.001 0.43766   \nResiduals      862  69.94  0.0811                   \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\neducationLevel has p-value &lt; 0.05, indicating that its effect on joviality is significant at the 5% level. This is something that we did not notice through our earlier visual plots. We should run a linear regression model to confirm the direction of this effect (positive or negative):\n\nmodel &lt;- lm(joviality ~ educationLevel, data = tmp)\nsummary(model)\n\n\nCall:\nlm(formula = joviality ~ educationLevel, data = tmp)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.49725 -0.25024 -0.02126  0.22596  0.55712 \n\nCoefficients:\n                  Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)       0.466797   0.012445  37.510  &lt; 2e-16 ***\neducationLevel.L  0.079426   0.029956   2.651  0.00816 ** \neducationLevel.Q  0.001392   0.024889   0.056  0.95541    \neducationLevel.C -0.020356   0.018481  -1.101  0.27100    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.2854 on 876 degrees of freedom\nMultiple R-squared:  0.01651,   Adjusted R-squared:  0.01314 \nF-statistic: 4.902 on 3 and 876 DF,  p-value: 0.002199\n\n\nSince the coefficient on educationLevel.L is positive and statistically significant at the 5% level, we can conclude that a higher education level is associated with higher joviality.\n(Note: ‘L’ stands for linear, ‘Q’ stands for quadratic, ‘C’ stands for cubic. Coefficients are as such due to the fact that educationLevel is an ordered factor.)"
  },
  {
    "objectID": "take-home_ex/take-home_ex_02.html",
    "href": "take-home_ex/take-home_ex_02.html",
    "title": "Take-home Exercise 02",
    "section": "",
    "text": "FishEye International has provided import/export data ranging from the year 2028 to 2034 regarding Oceanus’ fishing industries. This exercise attempts to make use of the data provided to detect those who are involved in IUU fishing, in particular, to answer the following question:\n\nIdentify companies that fit a pattern of illegal fishing. Use visualizations to support your conclusions and your confidence in them."
  },
  {
    "objectID": "take-home_ex/take-home_ex_02.html#detecting-illegal-unreported-and-unregulated-iuu-fishing",
    "href": "take-home_ex/take-home_ex_02.html#detecting-illegal-unreported-and-unregulated-iuu-fishing",
    "title": "Take-home Exercise 02",
    "section": "",
    "text": "FishEye International has provided import/export data ranging from the year 2028 to 2034 regarding Oceanus’ fishing industries. This exercise attempts to make use of the data provided to detect those who are involved in IUU fishing, in particular, to answer the following question:\n\nIdentify companies that fit a pattern of illegal fishing. Use visualizations to support your conclusions and your confidence in them."
  },
  {
    "objectID": "take-home_ex/take-home_ex_02.html#import-data",
    "href": "take-home_ex/take-home_ex_02.html#import-data",
    "title": "Take-home Exercise 02",
    "section": "Import data",
    "text": "Import data\nThe following code chunk is used to import the data. Since the provided data is in .json format, the fromJSON() function is used:\n\njson_file_path &lt;- \"data/mc2_challenge_graph.json\"\nmc2_file_path &lt;- \"data/mc2.rds\"\n\nif (!file.exists(mc2_file_path)) {\n  mc2 &lt;- fromJSON(json_file_path)\n  saveRDS(mc2, mc2_file_path)\n} else {\n  mc2 &lt;- readRDS(mc2_file_path)\n}\n\n\n\n\n\n\n\nQuicken the import process\n\n\n\nImporting data from the .json file takes time. Hence, an if-else loop is written here to ensure that the .json file only has to be imported once, after which, it will be saved as a .rds file. If the .rds file already exists, then it can be loaded directly with no need to re-run the .json file."
  },
  {
    "objectID": "take-home_ex/take-home_ex_02.html#data-wrangling",
    "href": "take-home_ex/take-home_ex_02.html#data-wrangling",
    "title": "Take-home Exercise 02",
    "section": "Data wrangling",
    "text": "Data wrangling\nNow that the data has been imported, we can load them as tibble dataframes. The select() function is used to select the relevant columns only and at the same time to re-order them into the desired order.\n\nmc2_nodes &lt;- as_tibble(mc2$nodes) %&gt;%\n  select(id, shpcountry, rcvcountry)\n\nmc2_edges &lt;- as_tibble(mc2$links) %&gt;%\n  mutate(ArrivalDate = ymd(arrivaldate)) %&gt;%\n  mutate(Year = year(ArrivalDate)) %&gt;%\n  select(\n    source,\n    target,\n    ArrivalDate,\n    Year,\n    hscode,\n    valueofgoods_omu,\n    volumeteu,\n    weightkg,\n    valueofgoodsusd\n  ) %&gt;%\n  distinct()\n\nFor every edge, it specifies a trade between a source and a target. The following code helps to yield a dataframe mc2_nodes_extracted of unique entities that appear on either ends of every edge (either a source or target of every trading relationship). At the same time, since some of the names of entities are rather long, a cid is generated as an auto-incremented company ID, so that the companies can be referred to more easily.\n\nmc2_nodes_extracted &lt;- union(unique(mc2_edges$source),\n                             unique(mc2_edges$target)) %&gt;% sort() %&gt;% as_tibble()\ncolnames(mc2_nodes_extracted) &lt;- \"name\"\nmc2_nodes_extracted &lt;- mc2_nodes_extracted %&gt;%\n  mutate(cid = row_number())\n\nSince every edge represents one transaction, having some sort of grouping would help to reduce the number of edges in the network.\nA grp_hscode variable is generated as the first digit of the column hscode. HS codes are 6 digit numbers specifying the exact type of good that is being traded. As there are many types of goods, plotting them all based on hscode would be too messy. By extracting only the first digit of HS codes, some insight may still be gleaned from these broader categories (there will only be 9 categories, 1 for each digit).\nThereafter, the edges are grouped by source and target companies, grp_hscode and Year. The number of trades (num_trades) and total weight in kg (total_weightkg) are summarised for each group. Only trading relationships between two companies with a frequency of more than 20 per year are included in the network. This helps to filter out the low-frequency traders that are less likely to have substantial impact on the industry.\n\nmc2_edges$grp_hscode &lt;- substr(mc2_edges$hscode, 1, 1)\n\nmc2_edges_agg &lt;- mc2_edges %&gt;%\n  group_by(source, target, grp_hscode, Year) %&gt;%\n  summarise(num_trades = n(),\n            total_weightkg = sum(weightkg)) %&gt;%\n  filter(source != target) %&gt;%\n  filter(num_trades &gt; 20) %&gt;%\n  ungroup()\n\n\n\n\n\n\n\nMissing description on hscode\n\n\n\nThough the data dictionary specifies that more information can be gleaned by merging with the hscode table, there is no such table that can be found from the downloads. As such, we do not have the description of the types of goods being traded, and will have to assume for this exercise that all goods provided in this dataset are fish/marine life-related."
  },
  {
    "objectID": "take-home_ex/take-home_ex_02.html#plotting-the-network-graph",
    "href": "take-home_ex/take-home_ex_02.html#plotting-the-network-graph",
    "title": "Take-home Exercise 02",
    "section": "Plotting the network graph",
    "text": "Plotting the network graph\nNow, a tbl_graph object will be created for the purpose of plotting the network graph. At the same time, the betweenness centrality and out-degree centrality of each company (across all years of trade) will be generated for each company (represented as a node). Betweenness and out-degree are both determined based on number of trades.\nThe reason for these measures are for the detection of potential IUU fishing:\n\nCompanies with positive betweenness centrality would mostly likely be acting as intermediaries or distributors. Such companies would be important links for the industry network. Hence, they are less likely to be the ones involved in IUU fishing. On the contrary, if a company has zero betweenness centrality, it is unlikely to serve as an important link for the industry network.\nCompanies with positive out-degree centrality, in addition to having zero betweenness centrality, would likely be fishing companies who sell what they catch. However, legitimate fishing companies who are not trying to keep a low profile would in all likelihood also engage in some sort of buying (e.g., for bait, ship components, or for other business activities), and thus not have zero betweenness centrality.\nTherefore, companies with zero betweenness centrality and positive out-degree centrality can be considered suspicious.\n\n\nmc2_graph &lt;- tbl_graph(nodes = mc2_nodes_extracted,\n                       edges = mc2_edges_agg,\n                       directed = TRUE) %&gt;%\n  activate(nodes) %&gt;%\n  mutate(betweenness_centrality = centrality_betweenness(weights = num_trades)) %&gt;%\n  mutate(outdegree_centrality = centrality_degree(weights = num_trades,\n                                                  mode = \"out\"))\n\nThe following code chunk creates the ggraph object for the year 2028. The for-loop is designed for scalability (adding years into the years vector will create the respective years’ ggraph objects separately).\nThe following elements are parts of the design of the network:\n\nBetweenness and out-degree centrality are re-generated for each node as the data is now filtered by each year.\nfilter(!node_is_isolated()) function helps to remove nodes that have no corresponding edges for the year.\nEdge widths represent the number of trades.\nEdge colours represent the type of goods being traded, based on grp_hscode.\nNode sizes represent the betweenness centrality.\nNode fills represent whether the out-degree centrality is zero or non-zero.\nInteractive elements will be explained later on.\n\n\nyears = c(\"2028\")\n\nfor (y in years) {\n  mygraph &lt;- paste(\"mc2\", \"graph\", y, sep = \"_\")\n  assign(\n    mygraph,\n    mc2_graph %&gt;%\n      activate(edges) %&gt;%\n      filter(Year == y) %&gt;%\n      activate(nodes) %&gt;%\n      filter(!node_is_isolated()) %&gt;%\n      mutate(betweenness_centrality = centrality_betweenness(weights = num_trades)) %&gt;%\n      mutate(outdegree_centrality = centrality_degree(weights = num_trades,\n                                                      mode = \"out\"))\n  )\n\n  assign(\n    paste(\"g\", y, sep = \"_\"),\n    ggraph(get(mygraph),\n           layout = \"nicely\") +\n      geom_edge_link(aes(width = num_trades,\n                         color = grp_hscode),\n                     alpha = 0.6) +\n      scale_edge_width(range = c(0.4, 4), name = \"Total weight\") +\n      scale_edge_color_brewer(name = \"HS code group\",\n                              palette = \"Set1\") +\n      geom_point_interactive(\n        aes(\n          x = x,\n          y = y,\n          tooltip = paste0(\n            \"Name:  \", name,\n            \"\\nCompany ID:  \", cid,\n            \"\\nOut-degree:  \", outdegree_centrality,\n            \"\\nBetweenness:  \", betweenness_centrality\n          ),\n          data_id = outdegree_centrality &gt; 0,\n          size = betweenness_centrality,\n          fill = outdegree_centrality &gt; 0\n        ),\n        colour = \"grey20\",\n        shape = 21,\n        alpha = 0.8\n      ) +\n      scale_fill_manual(labels = c(\"Zero\", \"Non-zero\"), values = c(\"cyan\", \"firebrick1\"), name = \"Out-degree\") +\n      scale_size_continuous(range = (c(1, 10)), name = \"Betweenness\") +\n      theme_graph(\n        foreground = \"grey20\",\n      ) +\n      labs(title = y) +\n      theme(plot.title = element_text(size = 11))\n  )\n}\n\nrm(y, years, mygraph)\n\n\nNetwork graph for year 2028\nTo have a sense of the scale of the network, only data from the year 2028 will be plotted using the following code chunk.\n\ngirafe(ggobj = g_2028,\n       options = list(opts_hover(css = \"fill:;\"),\n                      opts_hover_inv(css = \"opacity: 0.2;\"),\n                      opts_selection(type = \"multiple\", only_shiny = FALSE,\n                                     css = \"opacity:1;\"),\n                      opts_selection_inv(css = \"opacity:0;\")))\n\n\n\n\n\n\n\n\n\n\n\n\nInteractive elements\n\n\n\nA guide on how to interact with the network:\n\nMouseover each node to view a tooltip with information regarding the node.\nClick on a node of a specific colour to view only the nodes belonging to that colour (which specifies whether out-degree is zero or non-zero).\n\n\n\nFor this network plot, the nodes that are small red dots are of interest, as they represent companies with zero betweenness centrality and positive out-degree centrality."
  },
  {
    "objectID": "take-home_ex/take-home_ex_02.html#further-identifying-suspicious-companies",
    "href": "take-home_ex/take-home_ex_02.html#further-identifying-suspicious-companies",
    "title": "Take-home Exercise 02",
    "section": "Further identifying suspicious companies",
    "text": "Further identifying suspicious companies\nFurthermore, FishEye knows from past experience that companies caught fishing illegally will shut down but will then often start up again under a different name. As such, to make the network plot clearer, the companies that close down prematurely before 2034 (the end-year of the given dataset) will be identified.\n\nsuspects &lt;-\n  mc2_graph %&gt;% activate(nodes) %&gt;% data.frame() %&gt;% tibble() %&gt;%\n  filter(betweenness_centrality == 0) %&gt;%\n  filter(outdegree_centrality &gt; 0)\n\ncompanies_closed_down_1 &lt;- mc2_edges_agg %&gt;%\n  group_by(source) %&gt;%\n  summarise(year_of_closure = max(Year))\ncompanies_closed_down_2 &lt;- mc2_edges_agg %&gt;%\n  group_by(target) %&gt;%\n  summarise(year_of_closure = max(Year))\n\ncompanies_closed_down &lt;-\n  merge(\n    companies_closed_down_1,\n    companies_closed_down_2,\n    by.x = \"source\",\n    by.y = \"target\",\n    all = TRUE\n  )\ncompanies_closed_down$year_of_closure &lt;-\n  pmax(\n    companies_closed_down$year_of_closure.x,\n    companies_closed_down$year_of_closure.y,\n    na.rm = TRUE\n  )\nsuspects &lt;- companies_closed_down %&gt;%\n  select(name = source, year_of_closure) %&gt;%\n  filter(year_of_closure &lt; max(mc2_edges_agg$Year)) %&gt;%\n  filter(name %in% suspects$name)\n\nrm(companies_closed_down_1, companies_closed_down_2, companies_closed_down)\n\nThere are 6299 companies in the dataset. 1545 companies with zero betweenness centrality and positive out-degree centrality have closed down prematurely. This helps to cut down the number of nodes that are plotted.\nThese nodes will be labelled as suspicious, which is a variable that will take the value of “Yes” if the company fits the criteria, and “No” otherwise.\n\nmc2_graph &lt;- mc2_graph %&gt;%\n  activate(nodes) %&gt;%\n  mutate(suspicious = ifelse(name %in% suspects$name, \"Yes\", \"No\"))\n\nThe new networks will be plotted, using data from the years 2028, 2030, and 2032 (not every year is plotted due to memory limitations).\n\n\nShow the code\nyears = c(\"2028\", \"2030\", \"2032\")\n\nfor (y in years) {\n  mygraph &lt;- paste(\"mc2\", \"graph\", y, sep = \"_\")\n  assign(\n    mygraph,\n    mc2_graph %&gt;%\n      activate(edges) %&gt;%\n      filter(Year == y) %&gt;%\n      activate(nodes) %&gt;%\n      filter(!node_is_isolated()) %&gt;%\n      mutate(betweenness_centrality = centrality_betweenness(weights = num_trades)) %&gt;%\n      mutate(outdegree_centrality = centrality_degree(weights = num_trades,\n                                                      mode = \"out\"))\n  )\n\n  assign(\n    paste(\"g\", y, sep = \"_\"),\n    ggraph(get(mygraph),\n           layout = \"nicely\") +\n      geom_edge_link(aes(width = num_trades,\n                         color = grp_hscode),\n                     alpha = 0.6) +\n      scale_edge_width(range = c(0.4, 4), name = \"Total weight\") +\n      scale_edge_color_brewer(name = \"HS code group\",\n                              palette = \"Set1\") +\n      geom_point_interactive(\n        aes(\n          x = x,\n          y = y,\n          tooltip = paste0(\n            \"Name:  \", name,\n            \"\\nCompany ID:  \", cid,\n            \"\\nOut-degree:  \", outdegree_centrality,\n            \"\\nBetweenness:  \", betweenness_centrality,\n            \"\\nSuspicious?:  \", suspicious\n          ),\n          data_id = suspicious,\n          size = betweenness_centrality,\n          fill = suspicious\n        ),\n        colour = \"grey20\",\n        shape = 21,\n        alpha = 0.8\n      ) +\n      scale_fill_manual(values = c(\"cyan\", \"firebrick1\"), name = \"Suspicious?\") +\n      scale_size_continuous(range = (c(1, 10)), name = \"Betweenness\") +\n      theme_graph(\n        foreground = \"grey20\",\n      ) +\n      labs(title = y) +\n      theme(plot.title = element_text(size = 11))\n  )\n}\n\nrm(y, years, mygraph)\n\n\n\nNetwork plots for 2028, 2030, and 2032\n\n202820302032\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCompanies suspected of IUU fishing\n\n\n\nThese are the red nodes within the above network plots. For starters, the less connected nodes on the perimeter of the network can be explored first.\n\n\nThe list of suspicious companies can be found in the data table below:\n\nmc2_graph %&gt;%\n  activate(nodes) %&gt;%\n  data.frame() %&gt;%\n  filter(suspicious == \"Yes\") %&gt;%\n  select(name, cid, betweenness_centrality, outdegree_centrality) %&gt;%\n  datatable(options = list(order = list(list(4, 'desc'))))"
  },
  {
    "objectID": "take-home_ex/take-home_ex_02.html#making-the-network-plot-even-smaller",
    "href": "take-home_ex/take-home_ex_02.html#making-the-network-plot-even-smaller",
    "title": "Take-home Exercise 02",
    "section": "Making the network plot even smaller",
    "text": "Making the network plot even smaller\nLastly, with clearer clarity on the hscode and which are the goods most associated with IUU fishing, the network can be made smaller.\nFor example, focusing only on goods with grp_hscode == 3:\n\n\nShow the code\nyears = c(\"2028\")\n\nfor (y in years) {\n  mygraph &lt;- paste(\"mc2\", \"graph\", y, sep = \"_\")\n  assign(\n    mygraph,\n    mc2_graph %&gt;%\n      activate(edges) %&gt;%\n      filter(Year == y) %&gt;%\n      filter(grp_hscode == \"3\") %&gt;%\n      activate(nodes) %&gt;%\n      filter(!node_is_isolated()) %&gt;%\n      mutate(betweenness_centrality = centrality_betweenness(weights = num_trades)) %&gt;%\n      mutate(outdegree_centrality = centrality_degree(weights = num_trades,\n                                                      mode = \"out\"))\n  )\n\n  assign(\n    paste(\"g\", y, sep = \"_\"),\n    ggraph(get(mygraph),\n           layout = \"nicely\") +\n      geom_edge_link(aes(width = num_trades,\n                         color = grp_hscode),\n                     alpha = 0.6) +\n      scale_edge_width(range = c(0.4, 4), name = \"Total weight\") +\n      scale_edge_color_brewer(name = \"HS code group\",\n                              palette = \"Set1\") +\n      geom_point_interactive(\n        aes(\n          x = x,\n          y = y,\n          tooltip = paste0(\n            \"Name:  \", name,\n            \"\\nCompany ID:  \", cid,\n            \"\\nOut-degree:  \", outdegree_centrality,\n            \"\\nBetweenness:  \", betweenness_centrality,\n            \"\\nSuspicious?:  \", suspicious\n          ),\n          data_id = suspicious,\n          size = betweenness_centrality,\n          fill = suspicious\n        ),\n        colour = \"grey20\",\n        shape = 21,\n        alpha = 0.8\n      ) +\n      scale_fill_manual(values = c(\"cyan\", \"firebrick1\"), name = \"Suspicious?\") +\n      scale_size_continuous(range = (c(1, 10)), name = \"Betweenness\") +\n      theme_graph(\n        foreground = \"grey20\",\n      ) +\n      labs(title = \"Network plot for year 2028 and HS Group 3\") +\n      theme(plot.title = element_text(size = 11))\n  )\n}\n\nrm(y, years, mygraph)\n\n\n\n\nShow the code\ngirafe(ggobj = g_2028,\n       options = list(opts_hover(css = \"fill:;\"),\n                      opts_hover_inv(css = \"opacity: 0.2;\"),\n                      opts_selection(type = \"multiple\", only_shiny = FALSE,\n                                     css = \"opacity:1;\"),\n                      opts_selection_inv(css = \"opacity:0;\")))"
  },
  {
    "objectID": "take-home_ex/take-home_ex_03.html",
    "href": "take-home_ex/take-home_ex_03.html",
    "title": "Take-home Exercise 03",
    "section": "",
    "text": "FishEye International has provided import/export data ranging from the year 2028 to 2034 regarding Oceanus’ fishing industries. This exercise attempts to make use of the data provided to answer the following question:\n\nDevelop a visual analytics process to find similar businesses and group them. This analysis should focus on a business’s most important features and present those features clearly to the user.\n\nThe following features will be visualised on the subsequent network plots:\n\nDescription of product services (if available), broken down into product types via topic modelling.\nNumber of related persons tied to each person/company listed as nodes within the data, represented as edges.\nRevenue of each person/company listed as nodes within the data."
  },
  {
    "objectID": "take-home_ex/take-home_ex_03.html#developing-a-visual-analytics-process-to-find-similar-businesses-and-group-them",
    "href": "take-home_ex/take-home_ex_03.html#developing-a-visual-analytics-process-to-find-similar-businesses-and-group-them",
    "title": "Take-home Exercise 03",
    "section": "",
    "text": "FishEye International has provided import/export data ranging from the year 2028 to 2034 regarding Oceanus’ fishing industries. This exercise attempts to make use of the data provided to answer the following question:\n\nDevelop a visual analytics process to find similar businesses and group them. This analysis should focus on a business’s most important features and present those features clearly to the user.\n\nThe following features will be visualised on the subsequent network plots:\n\nDescription of product services (if available), broken down into product types via topic modelling.\nNumber of related persons tied to each person/company listed as nodes within the data, represented as edges.\nRevenue of each person/company listed as nodes within the data."
  },
  {
    "objectID": "take-home_ex/take-home_ex_03.html#import-data",
    "href": "take-home_ex/take-home_ex_03.html#import-data",
    "title": "Take-home Exercise 03",
    "section": "Import data",
    "text": "Import data\nThe following code chunk is used to import the data. Since the provided data is in .json format, the fromJSON() function is used:\n\njson_file_path &lt;- \"data/MC3.json\"\nmc3_file_path &lt;- \"data/mc3.rds\"\n\nif (!file.exists(mc3_file_path)) {\n  mc3_data &lt;- fromJSON(json_file_path)\n  saveRDS(mc3_data, mc3_file_path)\n} else {\n  mc3_data &lt;- readRDS(mc3_file_path)\n}\n\n\n\n\n\n\n\nQuicken the import process\n\n\n\nImporting data from the .json file may take time. Hence, an if-else loop is written here to ensure that the .json file only has to be imported once, after which, it will be saved as a .rds file. If the .rds file already exists, then it can be loaded directly with no need to re-run the .json file."
  },
  {
    "objectID": "take-home_ex/take-home_ex_03.html#data-wrangling",
    "href": "take-home_ex/take-home_ex_03.html#data-wrangling",
    "title": "Take-home Exercise 03",
    "section": "Data wrangling",
    "text": "Data wrangling\nNow that the data has been imported, we can load them as tibble dataframes. The mutate() function is used to ensure that the imported columns of the dataset are in the appropriate format.\nFirst, the edges are loaded:\n\nmc3_edges &lt;- as_tibble(mc3_data$links) %&gt;% \n  distinct() %&gt;%\n  mutate(source = as.character(source),\n         target = as.character(target),\n         type = as.character(type)) %&gt;%\n  group_by(source, target, type) %&gt;%\n    summarise(weights = n()) %&gt;%\n  filter(source!=target) %&gt;%\n  ungroup()\n\nThen, the nodes are extracted:\n\nmc3_nodes &lt;- as_tibble(mc3_data$nodes) %&gt;%\n  mutate(country = as.character(country),\n         id = as.character(id),\n         product_services = as.character(product_services),\n         revenue_omu = as.numeric(as.character(revenue_omu)),\n         type = as.character(type)) %&gt;%\n  select(id, country, type, revenue_omu, product_services)\n\nskim() is used to display some summary statistics of both dataframes:\n\nskim(mc3_nodes)\n\n\nData summary\n\n\nName\nmc3_nodes\n\n\nNumber of rows\n27622\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n4\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nid\n0\n1\n6\n64\n0\n22929\n0\n\n\ncountry\n0\n1\n2\n15\n0\n100\n0\n\n\ntype\n0\n1\n7\n16\n0\n3\n0\n\n\nproduct_services\n0\n1\n4\n1737\n0\n3244\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nrevenue_omu\n21515\n0.22\n1822155\n18184433\n3652.23\n7676.36\n16210.68\n48327.66\n310612303\n▇▁▁▁▁\n\n\n\n\nskim(mc3_edges)\n\n\nData summary\n\n\nName\nmc3_edges\n\n\nNumber of rows\n24036\n\n\nNumber of columns\n4\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n3\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nsource\n0\n1\n6\n700\n0\n12856\n0\n\n\ntarget\n0\n1\n6\n28\n0\n21265\n0\n\n\ntype\n0\n1\n16\n16\n0\n2\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nweights\n0\n1\n1\n0\n1\n1\n1\n1\n1\n▁▁▇▁▁\n\n\n\n\n\nWithin the mc3_nodes dataframe, there is a product_services column that contains text that can be very long (1737 characters at its maximum). An attempt will be made to use topic modelling to classify the types of products associated with each id based on this product_services description.\nPackages used for topic modelling are tm and topicmodels. Latent dirichlet allocation algorithm will be used for topic modelling.\n\nPre-processing\n\n# Change \"character(0)\" to \"Unknown\"\nmc3_nodes$product_services &lt;-\n  ifelse(mc3_nodes$product_services == \"character(0)\",\n         \"Unknown\",\n         mc3_nodes$product_services)\n\n# Exclude \"Unknown\" from topic modelling\nfiltered_mc3_nodes &lt;- mc3_nodes %&gt;%\n  filter(product_services != \"Unknown\")\n\n# Preprocessing\ncorpus &lt;- Corpus(VectorSource(filtered_mc3_nodes$product_services))\ncorpus &lt;- tm_map(corpus, content_transformer(tolower))\ncorpus &lt;- tm_map(corpus, removePunctuation)\ncorpus &lt;- tm_map(corpus, removeNumbers)\ncorpus &lt;- tm_map(corpus, removeWords, stopwords(\"english\"))\ncorpus &lt;- tm_map(corpus, stripWhitespace)\ncorpus &lt;- tm_map(corpus, stemDocument)\n\n# Text Transformation\ndtm &lt;- DocumentTermMatrix(corpus)\n\n\n\nTopic modelling\n\n# Build LDA model\nnum_topics = 8\nlda &lt;- LDA(dtm, k = num_topics)\n\n# Assigning topics as product_type\ntopics &lt;- topics(lda, 1)  # Get the topic probabilities for each document\nfiltered_mc3_nodes$product_type &lt;- topics\n\nThe following code chunk generates a datatable from DT package to help sample a few of each product_type to see if they are accurate:\n\nfiltered_mc3_nodes %&gt;%\n  group_by(product_type) %&gt;%\n  sample_n(3) %&gt;%\n  datatable()\n\n\n\n\n\n\n\n\n\n\n\n\nTopic modelling classifies imperfectly but is still useful\n\n\n\nClassification into product_type is done using the LDA model on the product_services column. From the data table above, we can see that there may be some misclassifications:\n\nProduct services that are drastically different are still grouped together.\nSome nodes would better belong to another product type.\n\nNevertheless, the misclassifications are relatively few. Based on a few runs, num_topics = 8 seems to yield the most accurate outcomes and best legibility of network plots, so the number of topics will be kept at 8.\n\n\nEarlier, there were “Unknown” in the product_services column. For these rows, the corresponding product_type shall be set as 0.\nTo be precise, there were 23604 “Unknown”, which is quite a large proportion of the 27622 nodes. This implies poor quality of data, though there is not much that can be done about it.\n\nmc3_nodes &lt;- left_join(mc3_nodes, filtered_mc3_nodes, by = names(mc3_nodes))\nmc3_nodes$product_type &lt;-\n  ifelse(is.na(mc3_nodes$product_type),\n         0,\n         mc3_nodes$product_type)\n\nLastly, product_type is checked to see if all product types are filled. Even distribution across product_type will aid in the legibility of subsequent network plots. If certain product_type are sparse, the number of topics during topic modelling can be reduced.\n\nsummary(mc3_nodes$product_type %&gt;% factor())\n\n    0     1     2     3     4     5     6     7     8 \n23604   534   459   373   514   458   792   536   352 \n\n\nIn this case, the distribution across product_type looks fine. Some variation is expected."
  },
  {
    "objectID": "take-home_ex/take-home_ex_03.html#network-graph-plotting---data-preparation",
    "href": "take-home_ex/take-home_ex_03.html#network-graph-plotting---data-preparation",
    "title": "Take-home Exercise 03",
    "section": "Network graph plotting - Data preparation",
    "text": "Network graph plotting - Data preparation\nTo explore the data further, network graphs will be plotted using ggraph() package.\nNodes are found in the mc3_nodes dataframe. Edges are found in mc3_edges. However, not all nodes from mc3_nodes are found in mc3_edge’s source column. Since information on nodes are found only in mc3_nodes, edges with source nodes that are not found in mc3_nodes should be removed, as there is no additional useful information that can be gleaned from these nodes.\nsource nodes in mc3_edges appear to represent companies and persons (based on the data definition provided), while target nodes appear to represent people, with their type specified as an edge attribute. This can be transferred over to the nodes dataframe. However, nodes with their type already defined in mc3_nodes should be retained.\n\nmc3_edges_cleaned &lt;- mc3_edges %&gt;%\n  filter(source %in% mc3_nodes$id)\n\nid1 &lt;- mc3_edges_cleaned %&gt;%\n  select(source) %&gt;%\n  rename(id = source) %&gt;%\n  mutate(type = \"Company\", node_type = \"source\")\nid2 &lt;- mc3_edges_cleaned %&gt;%\n  select(target, type) %&gt;%\n  rename(id = target) %&gt;%\n  mutate(node_type = \"target\")\n\nmc3_nodes_combined &lt;- rbind(id1, id2) %&gt;%\n  distinct() %&gt;%\n  left_join(mc3_nodes,\n            by = \"id\")\nmc3_nodes_combined$type &lt;-\n  ifelse(\n    is.na(mc3_nodes_combined$type.y), # if type of id is not defined in mc3_nodes\n    mc3_nodes_combined$type.x, # then use the value that was generated on top within rbind(id1, id2)\n    mc3_nodes_combined$type.y # else, just use the type of id defined in mc3_nodes\n  )\nmc3_nodes_combined &lt;- mc3_nodes_combined %&gt;%\n  select(id, country, type, revenue_omu, product_services, product_type, node_type)\n\nmc3_nodes_combined$product_type &lt;-\n  ifelse(mc3_nodes_combined$node_type == \"source\" & is.na(mc3_nodes_combined$product_type),\n         0,\n         mc3_nodes_combined$product_type)\n\nA tbl_graph() object will be created using these dataframes, while at same time generating some centrality measures, namely, betweenness and degree. Note that FishEye has stated that this graph is undirected, hence it must be specified that directed = FALSE.\n\nmc3_graph &lt;- tbl_graph(nodes = mc3_nodes_combined,\n                       edges = mc3_edges_cleaned,\n                       directed = FALSE) %&gt;%\n  mutate(betweenness_centrality = centrality_betweenness(),\n         degree_centrality = centrality_degree())\n\nIt may be helpful to segregate the networks by the quartile of each node’s revenue:\n\nrevenue_quartiles &lt;- summary(mc3_nodes_combined$revenue_omu)\nprint(revenue_quartiles)\none &lt;- revenue_quartiles[2]\ntwo &lt;- revenue_quartiles[3]\nthree &lt;- revenue_quartiles[5]\n\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max.      NA's \n     3652      8261     16967    939014     48267 310612303     18685"
  },
  {
    "objectID": "take-home_ex/take-home_ex_03.html#network-plots",
    "href": "take-home_ex/take-home_ex_03.html#network-plots",
    "title": "Take-home Exercise 03",
    "section": "Network plots",
    "text": "Network plots\nFirst, a function will be created to plot the network so that the huge chunk of code does not have to be repeated so many times:\n\ncreate_network &lt;- function(mygraph) {\n  \n  g &lt;- ggraph(mygraph,\n              layout = \"nicely\") +\n    geom_edge_link(aes(),\n                   color = \"black\",\n                   alpha = 0.8) +\n    geom_point_interactive(\n      aes(\n        x = x,\n        y = y,\n        tooltip = paste0(\n          \"Name:  \", id,\n          ifelse(is.na(country), \"\", paste0(\"\\nCountry:  \", country)),\n          ifelse(is.na(type), \"\", paste0(\"\\nType:  \", type)),\n          ifelse(is.na(revenue_omu), \"\", paste0(\"\\nRevenue:  \", round(revenue_omu, 2))),\n          ifelse(is.na(product_services), \"\", paste0(\"\\nProduct services:  \", product_services)),\n          ifelse(is.na(product_type), \"\", paste0(\"\\nProduct type:  \", product_type))\n        ),\n        data_id = type,\n        size = ifelse(is.na(revenue_omu),\n                      0,\n                      revenue_omu), \n        fill = type\n      ),\n      colour = \"grey20\",\n      shape = 21,\n      alpha = 1\n    ) +\n    scale_fill_discrete(name = \"Node type\") +\n    scale_size_continuous(name = \"Revenue\") +\n    theme_graph(foreground = \"grey20\", ) +\n    labs(title = \"\") +\n    theme(plot.title = element_text(size = 11))\n  \n  girafe(\n    ggobj = g,\n    options = list(\n      opts_hover(css = \"fill:;\"),\n      opts_hover_inv(css = \"opacity: 0.2;\"),\n      opts_selection(\n        type = \"multiple\",\n        only_shiny = FALSE,\n        css = \"opacity:1;\"\n      ),\n      opts_selection_inv(css = \"opacity:0;\")\n    )\n  )\n  \n}\n\n\n\n\n\n\n\nSubsequent network plots are tabbed by product_type of nodes.\n\n\n\nThis allows for closer investigation of patterns according to product types.\n\n\n\n\n\n\n\n\nInteractive elements\n\n\n\nA guide on how to interact with the network plots:\n\nMouseover each node to view a tooltip with information regarding the node.\nClick on a node of a specific colour to view only the nodes belonging to that colour (which specifies whether the node is a company, beneficial owner, or company contact).\n\n\n\n\nNetwork of companies ranked within 1st quartile by revenue or have unknown revenue\nTabbed by product type\n\nUnknown12345678\n\n\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter(revenue_omu &lt;= one | is.na(revenue_omu)) %&gt;%\n    filter(product_type == 0 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)\n\n\n\n\n\n\n\n\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter(revenue_omu &lt;= one | is.na(revenue_omu)) %&gt;%\n    filter(product_type == 1 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)\n\n\n\n\n\n\n\n\n\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter(revenue_omu &lt;= one | is.na(revenue_omu)) %&gt;%\n    filter(product_type == 2 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)\n\n\n\n\n\n\n\n\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter(revenue_omu &lt;= one | is.na(revenue_omu)) %&gt;%\n    filter(product_type == 3 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)\n\n\n\n\n\n\n\n\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter(revenue_omu &lt;= one | is.na(revenue_omu)) %&gt;%\n    filter(product_type == 4 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)\n\n\n\n\n\n\n\n\n\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter(revenue_omu &lt;= one | is.na(revenue_omu)) %&gt;%\n    filter(product_type == 5 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)\n\n\n\n\n\n\n\n\n\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter(revenue_omu &lt;= one | is.na(revenue_omu)) %&gt;%\n    filter(product_type == 6 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)\n\n\n\n\n\n\n\n\n\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter(revenue_omu &lt;= one | is.na(revenue_omu)) %&gt;%\n    filter(product_type == 7 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)\n\n\n\n\n\n\n\n\n\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter(revenue_omu &lt;= one | is.na(revenue_omu)) %&gt;%\n    filter(product_type == 8 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)\n\n\n\n\n\n\n\n\n\n\n\n\nNetwork of companies ranked within 2nd quartile by revenue\nTabbed by product type\n\nUnknown12345678\n\n\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter((revenue_omu &gt; one & revenue_omu &lt;= two) | node_type == \"target\") %&gt;%\n    filter(product_type == 0 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)\n\n\n\n\n\n\n\n\n\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter((revenue_omu &gt; one & revenue_omu &lt;= two) | node_type == \"target\") %&gt;%\n    filter(product_type == 1 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)\n\n\n\n\n\n\n\n\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter((revenue_omu &gt; one & revenue_omu &lt;= two) | node_type == \"target\") %&gt;%\n    filter(product_type == 2 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)\n\n\n\n\n\n\n\n\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter((revenue_omu &gt; one & revenue_omu &lt;= two) | node_type == \"target\") %&gt;%\n    filter(product_type == 3 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)\n\n\n\n\n\n\n\n\n\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter((revenue_omu &gt; one & revenue_omu &lt;= two) | node_type == \"target\") %&gt;%\n    filter(product_type == 4 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)\n\n\n\n\n\n\n\n\n\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter((revenue_omu &gt; one & revenue_omu &lt;= two) | node_type == \"target\") %&gt;%\n    filter(product_type == 5 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)\n\n\n\n\n\n\n\n\n\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter((revenue_omu &gt; one & revenue_omu &lt;= two) | node_type == \"target\") %&gt;%\n    filter(product_type == 6 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)\n\n\n\n\n\n\n\n\n\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter((revenue_omu &gt; one & revenue_omu &lt;= two) | node_type == \"target\") %&gt;%\n    filter(product_type == 7 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)\n\n\n\n\n\n\n\n\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter((revenue_omu &gt; one & revenue_omu &lt;= two) | node_type == \"target\") %&gt;%\n    filter(product_type == 8 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)\n\n\n\n\n\n\n\n\n\n\n\n\nNetwork of companies ranked within 3rd quartile by revenue\nTabbed by product type\n\nUnknown12345678\n\n\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter((revenue_omu &gt; two & revenue_omu &lt;= three) | node_type == \"target\") %&gt;%\n    filter(product_type == 0 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)\n\n\n\n\n\n\n\n\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter((revenue_omu &gt; two & revenue_omu &lt;= three) | node_type == \"target\") %&gt;%\n    filter(product_type == 1 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)\n\n\n\n\n\n\n\n\n\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter((revenue_omu &gt; two & revenue_omu &lt;= three) | node_type == \"target\") %&gt;%\n    filter(product_type == 2 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)\n\n\n\n\n\n\n\n\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter((revenue_omu &gt; two & revenue_omu &lt;= three) | node_type == \"target\") %&gt;%\n    filter(product_type == 3 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)\n\n\n\n\n\n\n\n\n\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter((revenue_omu &gt; two & revenue_omu &lt;= three) | node_type == \"target\") %&gt;%\n    filter(product_type == 4 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)\n\n\n\n\n\n\n\n\n\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter((revenue_omu &gt; two & revenue_omu &lt;= three) | node_type == \"target\") %&gt;%\n    filter(product_type == 5 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)\n\n\n\n\n\n\n\n\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter((revenue_omu &gt; two & revenue_omu &lt;= three) | node_type == \"target\") %&gt;%\n    filter(product_type == 6 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)\n\n\n\n\n\n\n\n\n\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter((revenue_omu &gt; two & revenue_omu &lt;= three) | node_type == \"target\") %&gt;%\n    filter(product_type == 7 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)\n\n\n\n\n\n\n\n\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter((revenue_omu &gt; two & revenue_omu &lt;= three) | node_type == \"target\") %&gt;%\n    filter(product_type == 8 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)\n\n\n\n\n\n\n\n\n\n\n\n\nNetwork of companies ranked within 4th quartile by revenue\nTabbed by product type\n\nUnknown12345678\n\n\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter(revenue_omu &gt; three | node_type == \"target\") %&gt;%\n    filter(product_type == 0 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)\n\n\n\n\n\n\n\n\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter(revenue_omu &gt; three | node_type == \"target\") %&gt;%\n    filter(product_type == 1 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)\n\n\n\n\n\n\n\n\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter(revenue_omu &gt; three | node_type == \"target\") %&gt;%\n    filter(product_type == 2 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)\n\n\n\n\n\n\n\n\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter(revenue_omu &gt; three | node_type == \"target\") %&gt;%\n    filter(product_type == 3 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)\n\n\n\n\n\n\n\n\n\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter(revenue_omu &gt; three | node_type == \"target\") %&gt;%\n    filter(product_type == 4 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)\n\n\n\n\n\n\n\n\n\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter(revenue_omu &gt; three | node_type == \"target\") %&gt;%\n    filter(product_type == 5 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)\n\n\n\n\n\n\n\n\n\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter(revenue_omu &gt; three | node_type == \"target\") %&gt;%\n    filter(product_type == 6 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)\n\n\n\n\n\n\n\n\n\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter(revenue_omu &gt; three | node_type == \"target\") %&gt;%\n    filter(product_type == 7 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)\n\n\n\n\n\n\n\n\n\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter(revenue_omu &gt; three | node_type == \"target\") %&gt;%\n    filter(product_type == 8 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)"
  },
  {
    "objectID": "take-home_ex/take-home_ex_03.html#observations-from-network-plots",
    "href": "take-home_ex/take-home_ex_03.html#observations-from-network-plots",
    "title": "Take-home Exercise 03",
    "section": "Observations from network plots",
    "text": "Observations from network plots\nBased on the network plots, some observations are:\n\nAs revenue increases, there are less ‘Unknowns’ in the product_services column. This makes sense as large companies are likely to be more prominent, resulting in better data quality.\nThere are still some network plots that are very dense and not much information can be gleaned from them. These plots are:\n\n1st quartile by revenue: Product type = ‘Unknown’\n2nd quartile by revenue: Product type = ‘Unknown’\n\nConsequently, if data quality can be improved in terms of obtaining the product_services description for more nodes, they could be classified for better visualisation instead of being lumped together under ‘Unknown’.\nHigh revenue companies do not necessarily have more beneficial owners. Quite a lot of high revenue companies have only a few beneficial owners and conversely, low revenue companies have numerous beneficial owners.\nSome beneficial owners or company contacts are involved with more than one company, though this is quite rare."
  },
  {
    "objectID": "take-home_ex/take-home_ex_03.html#section",
    "href": "take-home_ex/take-home_ex_03.html#section",
    "title": "Take-home Exercise 03",
    "section": "1",
    "text": "1\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter(revenue_omu &lt;= one | is.na(revenue_omu)) %&gt;%\n    filter(product_type == 1 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)"
  },
  {
    "objectID": "take-home_ex/take-home_ex_03.html#section-1",
    "href": "take-home_ex/take-home_ex_03.html#section-1",
    "title": "Take-home Exercise 03",
    "section": "2",
    "text": "2\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter(revenue_omu &lt;= one | is.na(revenue_omu)) %&gt;%\n    filter(product_type == 2 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)"
  },
  {
    "objectID": "take-home_ex/take-home_ex_03.html#section-2",
    "href": "take-home_ex/take-home_ex_03.html#section-2",
    "title": "Take-home Exercise 03",
    "section": "3",
    "text": "3\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter(revenue_omu &lt;= one | is.na(revenue_omu)) %&gt;%\n    filter(product_type == 3 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)"
  },
  {
    "objectID": "take-home_ex/take-home_ex_03.html#section-3",
    "href": "take-home_ex/take-home_ex_03.html#section-3",
    "title": "Take-home Exercise 03",
    "section": "4",
    "text": "4\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter(revenue_omu &lt;= one | is.na(revenue_omu)) %&gt;%\n    filter(product_type == 4 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)"
  },
  {
    "objectID": "take-home_ex/take-home_ex_03.html#section-4",
    "href": "take-home_ex/take-home_ex_03.html#section-4",
    "title": "Take-home Exercise 03",
    "section": "5",
    "text": "5\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter(revenue_omu &lt;= one | is.na(revenue_omu)) %&gt;%\n    filter(product_type == 5 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)"
  },
  {
    "objectID": "take-home_ex/take-home_ex_03.html#section-5",
    "href": "take-home_ex/take-home_ex_03.html#section-5",
    "title": "Take-home Exercise 03",
    "section": "6",
    "text": "6\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter(revenue_omu &lt;= one | is.na(revenue_omu)) %&gt;%\n    filter(product_type == 6 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)"
  },
  {
    "objectID": "take-home_ex/take-home_ex_03.html#section-6",
    "href": "take-home_ex/take-home_ex_03.html#section-6",
    "title": "Take-home Exercise 03",
    "section": "7",
    "text": "7\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter(revenue_omu &lt;= one | is.na(revenue_omu)) %&gt;%\n    filter(product_type == 7 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)"
  },
  {
    "objectID": "take-home_ex/take-home_ex_03.html#section-7",
    "href": "take-home_ex/take-home_ex_03.html#section-7",
    "title": "Take-home Exercise 03",
    "section": "8",
    "text": "8\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter(revenue_omu &lt;= one | is.na(revenue_omu)) %&gt;%\n    filter(product_type == 8 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)\n\n\n\n\n\n\n\n:::\n\nNetwork of companies ranked within 2nd quartile by revenue\nTabbed by product type ::: panel-tabset ## Unknown\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter((revenue_omu &gt; one & revenue_omu &lt;= two) | node_type == \"target\") %&gt;%\n    filter(product_type == 0 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)"
  },
  {
    "objectID": "take-home_ex/take-home_ex_03.html#section-8",
    "href": "take-home_ex/take-home_ex_03.html#section-8",
    "title": "Take-home Exercise 03",
    "section": "1",
    "text": "1\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter((revenue_omu &gt; one & revenue_omu &lt;= two) | node_type == \"target\") %&gt;%\n    filter(product_type == 1 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)"
  },
  {
    "objectID": "take-home_ex/take-home_ex_03.html#section-9",
    "href": "take-home_ex/take-home_ex_03.html#section-9",
    "title": "Take-home Exercise 03",
    "section": "2",
    "text": "2\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter((revenue_omu &gt; one & revenue_omu &lt;= two) | node_type == \"target\") %&gt;%\n    filter(product_type == 2 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)"
  },
  {
    "objectID": "take-home_ex/take-home_ex_03.html#section-10",
    "href": "take-home_ex/take-home_ex_03.html#section-10",
    "title": "Take-home Exercise 03",
    "section": "3",
    "text": "3\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter((revenue_omu &gt; one & revenue_omu &lt;= two) | node_type == \"target\") %&gt;%\n    filter(product_type == 3 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)"
  },
  {
    "objectID": "take-home_ex/take-home_ex_03.html#section-11",
    "href": "take-home_ex/take-home_ex_03.html#section-11",
    "title": "Take-home Exercise 03",
    "section": "4",
    "text": "4\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter((revenue_omu &gt; one & revenue_omu &lt;= two) | node_type == \"target\") %&gt;%\n    filter(product_type == 4 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)"
  },
  {
    "objectID": "take-home_ex/take-home_ex_03.html#section-12",
    "href": "take-home_ex/take-home_ex_03.html#section-12",
    "title": "Take-home Exercise 03",
    "section": "5",
    "text": "5\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter((revenue_omu &gt; one & revenue_omu &lt;= two) | node_type == \"target\") %&gt;%\n    filter(product_type == 5 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)"
  },
  {
    "objectID": "take-home_ex/take-home_ex_03.html#section-13",
    "href": "take-home_ex/take-home_ex_03.html#section-13",
    "title": "Take-home Exercise 03",
    "section": "6",
    "text": "6\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter((revenue_omu &gt; one & revenue_omu &lt;= two) | node_type == \"target\") %&gt;%\n    filter(product_type == 6 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)"
  },
  {
    "objectID": "take-home_ex/take-home_ex_03.html#section-14",
    "href": "take-home_ex/take-home_ex_03.html#section-14",
    "title": "Take-home Exercise 03",
    "section": "7",
    "text": "7\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter((revenue_omu &gt; one & revenue_omu &lt;= two) | node_type == \"target\") %&gt;%\n    filter(product_type == 7 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)"
  },
  {
    "objectID": "take-home_ex/take-home_ex_03.html#section-15",
    "href": "take-home_ex/take-home_ex_03.html#section-15",
    "title": "Take-home Exercise 03",
    "section": "8",
    "text": "8\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter((revenue_omu &gt; one & revenue_omu &lt;= two) | node_type == \"target\") %&gt;%\n    filter(product_type == 8 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)\n\n\n\n\n\n\n\n:::\n\nNetwork of companies ranked within 3rd quartile by revenue\nTabbed by product type ::: panel-tabset ## Unknown\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter((revenue_omu &gt; two & revenue_omu &lt;= three) | node_type == \"target\") %&gt;%\n    filter(product_type == 0 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)"
  },
  {
    "objectID": "take-home_ex/take-home_ex_03.html#section-16",
    "href": "take-home_ex/take-home_ex_03.html#section-16",
    "title": "Take-home Exercise 03",
    "section": "1",
    "text": "1\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter((revenue_omu &gt; two & revenue_omu &lt;= three) | node_type == \"target\") %&gt;%\n    filter(product_type == 1 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)"
  },
  {
    "objectID": "take-home_ex/take-home_ex_03.html#section-17",
    "href": "take-home_ex/take-home_ex_03.html#section-17",
    "title": "Take-home Exercise 03",
    "section": "2",
    "text": "2\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter((revenue_omu &gt; two & revenue_omu &lt;= three) | node_type == \"target\") %&gt;%\n    filter(product_type == 2 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)"
  },
  {
    "objectID": "take-home_ex/take-home_ex_03.html#section-18",
    "href": "take-home_ex/take-home_ex_03.html#section-18",
    "title": "Take-home Exercise 03",
    "section": "3",
    "text": "3\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter((revenue_omu &gt; two & revenue_omu &lt;= three) | node_type == \"target\") %&gt;%\n    filter(product_type == 3 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)"
  },
  {
    "objectID": "take-home_ex/take-home_ex_03.html#section-19",
    "href": "take-home_ex/take-home_ex_03.html#section-19",
    "title": "Take-home Exercise 03",
    "section": "4",
    "text": "4\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter((revenue_omu &gt; two & revenue_omu &lt;= three) | node_type == \"target\") %&gt;%\n    filter(product_type == 4 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)"
  },
  {
    "objectID": "take-home_ex/take-home_ex_03.html#section-20",
    "href": "take-home_ex/take-home_ex_03.html#section-20",
    "title": "Take-home Exercise 03",
    "section": "5",
    "text": "5\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter((revenue_omu &gt; two & revenue_omu &lt;= three) | node_type == \"target\") %&gt;%\n    filter(product_type == 5 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)"
  },
  {
    "objectID": "take-home_ex/take-home_ex_03.html#section-21",
    "href": "take-home_ex/take-home_ex_03.html#section-21",
    "title": "Take-home Exercise 03",
    "section": "6",
    "text": "6\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter((revenue_omu &gt; two & revenue_omu &lt;= three) | node_type == \"target\") %&gt;%\n    filter(product_type == 6 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)"
  },
  {
    "objectID": "take-home_ex/take-home_ex_03.html#section-22",
    "href": "take-home_ex/take-home_ex_03.html#section-22",
    "title": "Take-home Exercise 03",
    "section": "7",
    "text": "7\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter((revenue_omu &gt; two & revenue_omu &lt;= three) | node_type == \"target\") %&gt;%\n    filter(product_type == 7 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)"
  },
  {
    "objectID": "take-home_ex/take-home_ex_03.html#section-23",
    "href": "take-home_ex/take-home_ex_03.html#section-23",
    "title": "Take-home Exercise 03",
    "section": "8",
    "text": "8\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter((revenue_omu &gt; two & revenue_omu &lt;= three) | node_type == \"target\") %&gt;%\n    filter(product_type == 8 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)\n\n\n\n\n\n\n\n:::\n\nNetwork of companies ranked within 4th quartile by revenue\nTabbed by product type ::: panel-tabset ## Unknown\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter(revenue_omu &gt; three | node_type == \"target\") %&gt;%\n    filter(product_type == 0 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)"
  },
  {
    "objectID": "take-home_ex/take-home_ex_03.html#section-24",
    "href": "take-home_ex/take-home_ex_03.html#section-24",
    "title": "Take-home Exercise 03",
    "section": "1",
    "text": "1\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter(revenue_omu &gt; three | node_type == \"target\") %&gt;%\n    filter(product_type == 1 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)"
  },
  {
    "objectID": "take-home_ex/take-home_ex_03.html#section-25",
    "href": "take-home_ex/take-home_ex_03.html#section-25",
    "title": "Take-home Exercise 03",
    "section": "2",
    "text": "2\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter(revenue_omu &gt; three | node_type == \"target\") %&gt;%\n    filter(product_type == 2 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)"
  },
  {
    "objectID": "take-home_ex/take-home_ex_03.html#section-26",
    "href": "take-home_ex/take-home_ex_03.html#section-26",
    "title": "Take-home Exercise 03",
    "section": "3",
    "text": "3\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter(revenue_omu &gt; three | node_type == \"target\") %&gt;%\n    filter(product_type == 3 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)"
  },
  {
    "objectID": "take-home_ex/take-home_ex_03.html#section-27",
    "href": "take-home_ex/take-home_ex_03.html#section-27",
    "title": "Take-home Exercise 03",
    "section": "4",
    "text": "4\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter(revenue_omu &gt; three | node_type == \"target\") %&gt;%\n    filter(product_type == 4 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)"
  },
  {
    "objectID": "take-home_ex/take-home_ex_03.html#section-28",
    "href": "take-home_ex/take-home_ex_03.html#section-28",
    "title": "Take-home Exercise 03",
    "section": "5",
    "text": "5\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter(revenue_omu &gt; three | node_type == \"target\") %&gt;%\n    filter(product_type == 5 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)"
  },
  {
    "objectID": "take-home_ex/take-home_ex_03.html#section-29",
    "href": "take-home_ex/take-home_ex_03.html#section-29",
    "title": "Take-home Exercise 03",
    "section": "6",
    "text": "6\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter(revenue_omu &gt; three | node_type == \"target\") %&gt;%\n    filter(product_type == 6 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)"
  },
  {
    "objectID": "take-home_ex/take-home_ex_03.html#section-30",
    "href": "take-home_ex/take-home_ex_03.html#section-30",
    "title": "Take-home Exercise 03",
    "section": "7",
    "text": "7\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter(revenue_omu &gt; three | node_type == \"target\") %&gt;%\n    filter(product_type == 7 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)"
  },
  {
    "objectID": "take-home_ex/take-home_ex_03.html#section-31",
    "href": "take-home_ex/take-home_ex_03.html#section-31",
    "title": "Take-home Exercise 03",
    "section": "8",
    "text": "8\n\n\nCode\ncreate_network(\n  mc3_graph %&gt;%\n    activate(nodes) %&gt;%\n    filter(revenue_omu &gt; three | node_type == \"target\") %&gt;%\n    filter(product_type == 8 | node_type == \"target\") %&gt;%\n    filter(!node_is_isolated())\n)\n\n\n\n\n\n\n\n:::"
  }
]